
Game_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e5a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002e5a  00002ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023c4  00000000  00000000  00002ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b89  00000000  00000000  000052b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000060ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000099d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a58b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 01 11 	call	0x2202	; 0x2202 <main>
      7a:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e7       	ldi	r26, 0x78	; 120
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f4 16 	jmp	0x2de8	; 0x2de8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e7       	ldi	r24, 0x78	; 120
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 00 17 	jmp	0x2e00	; 0x2e00 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <HKPD_Init>:
#include "HKPD_CONFIG.h"
#include "avr/delay.h"


void HKPD_Init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	MDIO_VoidSetPortDirection(Copy_HKPDPort,0b11110000);
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	60 ef       	ldi	r22, 0xF0	; 240
     b42:	0e 94 02 10 	call	0x2004	; 0x2004 <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPortValue(Copy_HKPDPort,0b00001111);
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	6f e0       	ldi	r22, 0x0F	; 15
     b4a:	0e 94 43 10 	call	0x2086	; 0x2086 <MDIO_VoidSetPortValue>
}
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <Get_PressKey>:

u8 Get_PressKey(void)
{
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	62 97       	sbiw	r28, 0x12	; 18
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
	u8 prs_key=50;
     b68:	82 e3       	ldi	r24, 0x32	; 50
     b6a:	8a 8b       	std	Y+18, r24	; 0x12
	for (u8 c=0;c<4;c++)
     b6c:	19 8a       	std	Y+17, r1	; 0x11
     b6e:	a2 c0       	rjmp	.+324    	; 0xcb4 <Get_PressKey+0x160>
	{
		MDIO_VoidSetPinValue(Copy_HKPDPort,4+c,0);
     b70:	89 89       	ldd	r24, Y+17	; 0x11
     b72:	98 2f       	mov	r25, r24
     b74:	9c 5f       	subi	r25, 0xFC	; 252
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	69 2f       	mov	r22, r25
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
		for (u8 r=0;r<4;r++)
     b80:	18 8a       	std	Y+16, r1	; 0x10
     b82:	89 c0       	rjmp	.+274    	; 0xc96 <Get_PressKey+0x142>
		{
			u8 x=MDIO_u8GetPinValue(Copy_HKPDPort,r);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	68 89       	ldd	r22, Y+16	; 0x10
     b88:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <MDIO_u8GetPinValue>
     b8c:	8f 87       	std	Y+15, r24	; 0x0f
			if (0==x)
     b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b90:	88 23       	and	r24, r24
     b92:	61 f4       	brne	.+24     	; 0xbac <Get_PressKey+0x58>
			{
				prs_key=(4*r)+c+1;
     b94:	88 89       	ldd	r24, Y+16	; 0x10
     b96:	88 2f       	mov	r24, r24
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	98 2f       	mov	r25, r24
     ba4:	89 89       	ldd	r24, Y+17	; 0x11
     ba6:	89 0f       	add	r24, r25
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	8a 8b       	std	Y+18, r24	; 0x12
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a0 e0       	ldi	r26, 0x00	; 0
     bb2:	b1 e4       	ldi	r27, 0x41	; 65
     bb4:	8b 87       	std	Y+11, r24	; 0x0b
     bb6:	9c 87       	std	Y+12, r25	; 0x0c
     bb8:	ad 87       	std	Y+13, r26	; 0x0d
     bba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
     bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	4a ef       	ldi	r20, 0xFA	; 250
     bca:	54 e4       	ldi	r21, 0x44	; 68
     bcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	8f 83       	std	Y+7, r24	; 0x07
     bd6:	98 87       	std	Y+8, r25	; 0x08
     bd8:	a9 87       	std	Y+9, r26	; 0x09
     bda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bdc:	6f 81       	ldd	r22, Y+7	; 0x07
     bde:	78 85       	ldd	r23, Y+8	; 0x08
     be0:	89 85       	ldd	r24, Y+9	; 0x09
     be2:	9a 85       	ldd	r25, Y+10	; 0x0a
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e8       	ldi	r20, 0x80	; 128
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bf0:	88 23       	and	r24, r24
     bf2:	2c f4       	brge	.+10     	; 0xbfe <Get_PressKey+0xaa>
		__ticks = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	8d 83       	std	Y+5, r24	; 0x05
     bfc:	3f c0       	rjmp	.+126    	; 0xc7c <Get_PressKey+0x128>
	else if (__tmp > 65535)
     bfe:	6f 81       	ldd	r22, Y+7	; 0x07
     c00:	78 85       	ldd	r23, Y+8	; 0x08
     c02:	89 85       	ldd	r24, Y+9	; 0x09
     c04:	9a 85       	ldd	r25, Y+10	; 0x0a
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	3f ef       	ldi	r19, 0xFF	; 255
     c0a:	4f e7       	ldi	r20, 0x7F	; 127
     c0c:	57 e4       	ldi	r21, 0x47	; 71
     c0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c12:	18 16       	cp	r1, r24
     c14:	4c f5       	brge	.+82     	; 0xc68 <Get_PressKey+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c16:	6b 85       	ldd	r22, Y+11	; 0x0b
     c18:	7c 85       	ldd	r23, Y+12	; 0x0c
     c1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c1c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	9e 83       	std	Y+6, r25	; 0x06
     c3c:	8d 83       	std	Y+5, r24	; 0x05
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <Get_PressKey+0x10a>
     c40:	88 ec       	ldi	r24, 0xC8	; 200
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9c 83       	std	Y+4, r25	; 0x04
     c46:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	9c 81       	ldd	r25, Y+4	; 0x04
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <Get_PressKey+0xf8>
     c50:	9c 83       	std	Y+4, r25	; 0x04
     c52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9e 83       	std	Y+6, r25	; 0x06
     c5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5e:	8d 81       	ldd	r24, Y+5	; 0x05
     c60:	9e 81       	ldd	r25, Y+6	; 0x06
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	69 f7       	brne	.-38     	; 0xc40 <Get_PressKey+0xec>
     c66:	14 c0       	rjmp	.+40     	; 0xc90 <Get_PressKey+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c68:	6f 81       	ldd	r22, Y+7	; 0x07
     c6a:	78 85       	ldd	r23, Y+8	; 0x08
     c6c:	89 85       	ldd	r24, Y+9	; 0x09
     c6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	9e 83       	std	Y+6, r25	; 0x06
     c7a:	8d 83       	std	Y+5, r24	; 0x05
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	9a 83       	std	Y+2, r25	; 0x02
     c82:	89 83       	std	Y+1, r24	; 0x01
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	9a 81       	ldd	r25, Y+2	; 0x02
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <Get_PressKey+0x134>
     c8c:	9a 83       	std	Y+2, r25	; 0x02
     c8e:	89 83       	std	Y+1, r24	; 0x01
{
	u8 prs_key=50;
	for (u8 c=0;c<4;c++)
	{
		MDIO_VoidSetPinValue(Copy_HKPDPort,4+c,0);
		for (u8 r=0;r<4;r++)
     c90:	88 89       	ldd	r24, Y+16	; 0x10
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	88 8b       	std	Y+16, r24	; 0x10
     c96:	88 89       	ldd	r24, Y+16	; 0x10
     c98:	84 30       	cpi	r24, 0x04	; 4
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <Get_PressKey+0x14a>
     c9c:	73 cf       	rjmp	.-282    	; 0xb84 <Get_PressKey+0x30>
//			{
//
//			}
			_delay_ms(8);
		}
		MDIO_VoidSetPinValue(Copy_HKPDPort,4+c,1);
     c9e:	89 89       	ldd	r24, Y+17	; 0x11
     ca0:	98 2f       	mov	r25, r24
     ca2:	9c 5f       	subi	r25, 0xFC	; 252
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	69 2f       	mov	r22, r25
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
}

u8 Get_PressKey(void)
{
	u8 prs_key=50;
	for (u8 c=0;c<4;c++)
     cae:	89 89       	ldd	r24, Y+17	; 0x11
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	89 8b       	std	Y+17, r24	; 0x11
     cb4:	89 89       	ldd	r24, Y+17	; 0x11
     cb6:	84 30       	cpi	r24, 0x04	; 4
     cb8:	08 f4       	brcc	.+2      	; 0xcbc <Get_PressKey+0x168>
     cba:	5a cf       	rjmp	.-332    	; 0xb70 <Get_PressKey+0x1c>
			_delay_ms(8);
		}
		MDIO_VoidSetPinValue(Copy_HKPDPort,4+c,1);
	}
	
	return prs_key;
     cbc:	8a 89       	ldd	r24, Y+18	; 0x12
	
	
}
     cbe:	62 96       	adiw	r28, 0x12	; 18
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <HLCD_VoidSendChar>:
#include "MDIO_Interface.h"
#include "HLCD_CONFIG.h"
#include <avr/delay.h>

void HLCD_VoidSendChar(u8 Copy_U8Data)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	ab 97       	sbiw	r28, 0x2b	; 43
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	8b a7       	std	Y+43, r24	; 0x2b
	/*Set RS=1, to send data*/
	MDIO_VoidSetPinValue(Copy_RSPort,PIN0,1);
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
	/*Set Rw=0, to write */
	MDIO_VoidSetPinValue(Copy_RWPort,PIN1,0);
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
	/*Portc = data*/
	MDIO_VoidSetPortValue(PORTC, Copy_U8Data);
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	6b a5       	ldd	r22, Y+43	; 0x2b
     cfe:	0e 94 43 10 	call	0x2086	; 0x2086 <MDIO_VoidSetPortValue>
	/*En_seq*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,0);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	62 e0       	ldi	r22, 0x02	; 2
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a0 e8       	ldi	r26, 0x80	; 128
     d12:	bf e3       	ldi	r27, 0x3F	; 63
     d14:	8f a3       	std	Y+39, r24	; 0x27
     d16:	98 a7       	std	Y+40, r25	; 0x28
     d18:	a9 a7       	std	Y+41, r26	; 0x29
     d1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1c:	6f a1       	ldd	r22, Y+39	; 0x27
     d1e:	78 a5       	ldd	r23, Y+40	; 0x28
     d20:	89 a5       	ldd	r24, Y+41	; 0x29
     d22:	9a a5       	ldd	r25, Y+42	; 0x2a
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	4a ef       	ldi	r20, 0xFA	; 250
     d2a:	54 e4       	ldi	r21, 0x44	; 68
     d2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	8b a3       	std	Y+35, r24	; 0x23
     d36:	9c a3       	std	Y+36, r25	; 0x24
     d38:	ad a3       	std	Y+37, r26	; 0x25
     d3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d3c:	6b a1       	ldd	r22, Y+35	; 0x23
     d3e:	7c a1       	ldd	r23, Y+36	; 0x24
     d40:	8d a1       	ldd	r24, Y+37	; 0x25
     d42:	9e a1       	ldd	r25, Y+38	; 0x26
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	40 e8       	ldi	r20, 0x80	; 128
     d4a:	5f e3       	ldi	r21, 0x3F	; 63
     d4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d50:	88 23       	and	r24, r24
     d52:	2c f4       	brge	.+10     	; 0xd5e <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	9a a3       	std	Y+34, r25	; 0x22
     d5a:	89 a3       	std	Y+33, r24	; 0x21
     d5c:	3f c0       	rjmp	.+126    	; 0xddc <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
     d5e:	6b a1       	ldd	r22, Y+35	; 0x23
     d60:	7c a1       	ldd	r23, Y+36	; 0x24
     d62:	8d a1       	ldd	r24, Y+37	; 0x25
     d64:	9e a1       	ldd	r25, Y+38	; 0x26
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	4f e7       	ldi	r20, 0x7F	; 127
     d6c:	57 e4       	ldi	r21, 0x47	; 71
     d6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d72:	18 16       	cp	r1, r24
     d74:	4c f5       	brge	.+82     	; 0xdc8 <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d76:	6f a1       	ldd	r22, Y+39	; 0x27
     d78:	78 a5       	ldd	r23, Y+40	; 0x28
     d7a:	89 a5       	ldd	r24, Y+41	; 0x29
     d7c:	9a a5       	ldd	r25, Y+42	; 0x2a
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e2       	ldi	r20, 0x20	; 32
     d84:	51 e4       	ldi	r21, 0x41	; 65
     d86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	bc 01       	movw	r22, r24
     d90:	cd 01       	movw	r24, r26
     d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9a a3       	std	Y+34, r25	; 0x22
     d9c:	89 a3       	std	Y+33, r24	; 0x21
     d9e:	0f c0       	rjmp	.+30     	; 0xdbe <HLCD_VoidSendChar+0xee>
     da0:	88 ec       	ldi	r24, 0xC8	; 200
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	98 a3       	std	Y+32, r25	; 0x20
     da6:	8f 8f       	std	Y+31, r24	; 0x1f
     da8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     daa:	98 a1       	ldd	r25, Y+32	; 0x20
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <HLCD_VoidSendChar+0xdc>
     db0:	98 a3       	std	Y+32, r25	; 0x20
     db2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db4:	89 a1       	ldd	r24, Y+33	; 0x21
     db6:	9a a1       	ldd	r25, Y+34	; 0x22
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	9a a3       	std	Y+34, r25	; 0x22
     dbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbe:	89 a1       	ldd	r24, Y+33	; 0x21
     dc0:	9a a1       	ldd	r25, Y+34	; 0x22
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	69 f7       	brne	.-38     	; 0xda0 <HLCD_VoidSendChar+0xd0>
     dc6:	14 c0       	rjmp	.+40     	; 0xdf0 <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc8:	6b a1       	ldd	r22, Y+35	; 0x23
     dca:	7c a1       	ldd	r23, Y+36	; 0x24
     dcc:	8d a1       	ldd	r24, Y+37	; 0x25
     dce:	9e a1       	ldd	r25, Y+38	; 0x26
     dd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	9a a3       	std	Y+34, r25	; 0x22
     dda:	89 a3       	std	Y+33, r24	; 0x21
     ddc:	89 a1       	ldd	r24, Y+33	; 0x21
     dde:	9a a1       	ldd	r25, Y+34	; 0x22
     de0:	9e 8f       	std	Y+30, r25	; 0x1e
     de2:	8d 8f       	std	Y+29, r24	; 0x1d
     de4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <HLCD_VoidSendChar+0x118>
     dec:	9e 8f       	std	Y+30, r25	; 0x1e
     dee:	8d 8f       	std	Y+29, r24	; 0x1d
	/* wait 1ms */
	_delay_ms(1);
	/*set High to enable*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,1);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	62 e0       	ldi	r22, 0x02	; 2
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a0 e8       	ldi	r26, 0x80	; 128
     e00:	bf e3       	ldi	r27, 0x3F	; 63
     e02:	89 8f       	std	Y+25, r24	; 0x19
     e04:	9a 8f       	std	Y+26, r25	; 0x1a
     e06:	ab 8f       	std	Y+27, r26	; 0x1b
     e08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	69 8d       	ldd	r22, Y+25	; 0x19
     e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a ef       	ldi	r20, 0xFA	; 250
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8d 8b       	std	Y+21, r24	; 0x15
     e24:	9e 8b       	std	Y+22, r25	; 0x16
     e26:	af 8b       	std	Y+23, r26	; 0x17
     e28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e2a:	6d 89       	ldd	r22, Y+21	; 0x15
     e2c:	7e 89       	ldd	r23, Y+22	; 0x16
     e2e:	8f 89       	ldd	r24, Y+23	; 0x17
     e30:	98 8d       	ldd	r25, Y+24	; 0x18
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9c 8b       	std	Y+20, r25	; 0x14
     e48:	8b 8b       	std	Y+19, r24	; 0x13
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
     e4c:	6d 89       	ldd	r22, Y+21	; 0x15
     e4e:	7e 89       	ldd	r23, Y+22	; 0x16
     e50:	8f 89       	ldd	r24, Y+23	; 0x17
     e52:	98 8d       	ldd	r25, Y+24	; 0x18
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	69 8d       	ldd	r22, Y+25	; 0x19
     e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9c 8b       	std	Y+20, r25	; 0x14
     e8a:	8b 8b       	std	Y+19, r24	; 0x13
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <HLCD_VoidSendChar+0x1dc>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9a 8b       	std	Y+18, r25	; 0x12
     e94:	89 8b       	std	Y+17, r24	; 0x11
     e96:	89 89       	ldd	r24, Y+17	; 0x11
     e98:	9a 89       	ldd	r25, Y+18	; 0x12
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <HLCD_VoidSendChar+0x1ca>
     e9e:	9a 8b       	std	Y+18, r25	; 0x12
     ea0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8b 89       	ldd	r24, Y+19	; 0x13
     ea4:	9c 89       	ldd	r25, Y+20	; 0x14
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9c 8b       	std	Y+20, r25	; 0x14
     eaa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8b 89       	ldd	r24, Y+19	; 0x13
     eae:	9c 89       	ldd	r25, Y+20	; 0x14
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <HLCD_VoidSendChar+0x1be>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6d 89       	ldd	r22, Y+21	; 0x15
     eb8:	7e 89       	ldd	r23, Y+22	; 0x16
     eba:	8f 89       	ldd	r24, Y+23	; 0x17
     ebc:	98 8d       	ldd	r25, Y+24	; 0x18
     ebe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
     eca:	8b 89       	ldd	r24, Y+19	; 0x13
     ecc:	9c 89       	ldd	r25, Y+20	; 0x14
     ece:	98 8b       	std	Y+16, r25	; 0x10
     ed0:	8f 87       	std	Y+15, r24	; 0x0f
     ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed4:	98 89       	ldd	r25, Y+16	; 0x10
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <HLCD_VoidSendChar+0x206>
     eda:	98 8b       	std	Y+16, r25	; 0x10
     edc:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait 1ms */
	_delay_ms(1);
	/*set low to enable*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,0);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	62 e0       	ldi	r22, 0x02	; 2
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e4       	ldi	r27, 0x40	; 64
     ef0:	8b 87       	std	Y+11, r24	; 0x0b
     ef2:	9c 87       	std	Y+12, r25	; 0x0c
     ef4:	ad 87       	std	Y+13, r26	; 0x0d
     ef6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
     efa:	7c 85       	ldd	r23, Y+12	; 0x0c
     efc:	8d 85       	ldd	r24, Y+13	; 0x0d
     efe:	9e 85       	ldd	r25, Y+14	; 0x0e
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	4a ef       	ldi	r20, 0xFA	; 250
     f06:	54 e4       	ldi	r21, 0x44	; 68
     f08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	8f 83       	std	Y+7, r24	; 0x07
     f12:	98 87       	std	Y+8, r25	; 0x08
     f14:	a9 87       	std	Y+9, r26	; 0x09
     f16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f18:	6f 81       	ldd	r22, Y+7	; 0x07
     f1a:	78 85       	ldd	r23, Y+8	; 0x08
     f1c:	89 85       	ldd	r24, Y+9	; 0x09
     f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	2c f4       	brge	.+10     	; 0xf3a <HLCD_VoidSendChar+0x26a>
		__ticks = 1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9e 83       	std	Y+6, r25	; 0x06
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	3f c0       	rjmp	.+126    	; 0xfb8 <HLCD_VoidSendChar+0x2e8>
	else if (__tmp > 65535)
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	3f ef       	ldi	r19, 0xFF	; 255
     f46:	4f e7       	ldi	r20, 0x7F	; 127
     f48:	57 e4       	ldi	r21, 0x47	; 71
     f4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f4e:	18 16       	cp	r1, r24
     f50:	4c f5       	brge	.+82     	; 0xfa4 <HLCD_VoidSendChar+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f52:	6b 85       	ldd	r22, Y+11	; 0x0b
     f54:	7c 85       	ldd	r23, Y+12	; 0x0c
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e2       	ldi	r20, 0x20	; 32
     f60:	51 e4       	ldi	r21, 0x41	; 65
     f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	9e 83       	std	Y+6, r25	; 0x06
     f78:	8d 83       	std	Y+5, r24	; 0x05
     f7a:	0f c0       	rjmp	.+30     	; 0xf9a <HLCD_VoidSendChar+0x2ca>
     f7c:	88 ec       	ldi	r24, 0xC8	; 200
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9c 83       	std	Y+4, r25	; 0x04
     f82:	8b 83       	std	Y+3, r24	; 0x03
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <HLCD_VoidSendChar+0x2b8>
     f8c:	9c 83       	std	Y+4, r25	; 0x04
     f8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	9e 83       	std	Y+6, r25	; 0x06
     f98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	69 f7       	brne	.-38     	; 0xf7c <HLCD_VoidSendChar+0x2ac>
     fa2:	14 c0       	rjmp	.+40     	; 0xfcc <HLCD_VoidSendChar+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa4:	6f 81       	ldd	r22, Y+7	; 0x07
     fa6:	78 85       	ldd	r23, Y+8	; 0x08
     fa8:	89 85       	ldd	r24, Y+9	; 0x09
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <HLCD_VoidSendChar+0x2f4>
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
	/* wait 1ms */
	_delay_ms(2);
}
     fcc:	ab 96       	adiw	r28, 0x2b	; 43
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <HLCD_VoidSendCommand>:
void HLCD_VoidSendCommand(u8 Copy_U8Command)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	ab 97       	sbiw	r28, 0x2b	; 43
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	8b a7       	std	Y+43, r24	; 0x2b
	/*Set RS=1, to send data*/
	MDIO_VoidSetPinValue(Copy_RSPort,PIN0,0);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
	/*Set Rw=0, to write */
	MDIO_VoidSetPinValue(Copy_RWPort,PIN1,0);
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
	/*Portc = data*/
	MDIO_VoidSetPortValue(Copy_DataPort, Copy_U8Command);
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	6b a5       	ldd	r22, Y+43	; 0x2b
    100c:	0e 94 43 10 	call	0x2086	; 0x2086 <MDIO_VoidSetPortValue>
	/*En_seq*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,0);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	62 e0       	ldi	r22, 0x02	; 2
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a0 e8       	ldi	r26, 0x80	; 128
    1020:	bf e3       	ldi	r27, 0x3F	; 63
    1022:	8f a3       	std	Y+39, r24	; 0x27
    1024:	98 a7       	std	Y+40, r25	; 0x28
    1026:	a9 a7       	std	Y+41, r26	; 0x29
    1028:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102a:	6f a1       	ldd	r22, Y+39	; 0x27
    102c:	78 a5       	ldd	r23, Y+40	; 0x28
    102e:	89 a5       	ldd	r24, Y+41	; 0x29
    1030:	9a a5       	ldd	r25, Y+42	; 0x2a
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	4a ef       	ldi	r20, 0xFA	; 250
    1038:	54 e4       	ldi	r21, 0x44	; 68
    103a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	8b a3       	std	Y+35, r24	; 0x23
    1044:	9c a3       	std	Y+36, r25	; 0x24
    1046:	ad a3       	std	Y+37, r26	; 0x25
    1048:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    104a:	6b a1       	ldd	r22, Y+35	; 0x23
    104c:	7c a1       	ldd	r23, Y+36	; 0x24
    104e:	8d a1       	ldd	r24, Y+37	; 0x25
    1050:	9e a1       	ldd	r25, Y+38	; 0x26
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e8       	ldi	r20, 0x80	; 128
    1058:	5f e3       	ldi	r21, 0x3F	; 63
    105a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    105e:	88 23       	and	r24, r24
    1060:	2c f4       	brge	.+10     	; 0x106c <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	9a a3       	std	Y+34, r25	; 0x22
    1068:	89 a3       	std	Y+33, r24	; 0x21
    106a:	3f c0       	rjmp	.+126    	; 0x10ea <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    106c:	6b a1       	ldd	r22, Y+35	; 0x23
    106e:	7c a1       	ldd	r23, Y+36	; 0x24
    1070:	8d a1       	ldd	r24, Y+37	; 0x25
    1072:	9e a1       	ldd	r25, Y+38	; 0x26
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	3f ef       	ldi	r19, 0xFF	; 255
    1078:	4f e7       	ldi	r20, 0x7F	; 127
    107a:	57 e4       	ldi	r21, 0x47	; 71
    107c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1080:	18 16       	cp	r1, r24
    1082:	4c f5       	brge	.+82     	; 0x10d6 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1084:	6f a1       	ldd	r22, Y+39	; 0x27
    1086:	78 a5       	ldd	r23, Y+40	; 0x28
    1088:	89 a5       	ldd	r24, Y+41	; 0x29
    108a:	9a a5       	ldd	r25, Y+42	; 0x2a
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	40 e2       	ldi	r20, 0x20	; 32
    1092:	51 e4       	ldi	r21, 0x41	; 65
    1094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	bc 01       	movw	r22, r24
    109e:	cd 01       	movw	r24, r26
    10a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	9a a3       	std	Y+34, r25	; 0x22
    10aa:	89 a3       	std	Y+33, r24	; 0x21
    10ac:	0f c0       	rjmp	.+30     	; 0x10cc <HLCD_VoidSendCommand+0xee>
    10ae:	88 ec       	ldi	r24, 0xC8	; 200
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	98 a3       	std	Y+32, r25	; 0x20
    10b4:	8f 8f       	std	Y+31, r24	; 0x1f
    10b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10b8:	98 a1       	ldd	r25, Y+32	; 0x20
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <HLCD_VoidSendCommand+0xdc>
    10be:	98 a3       	std	Y+32, r25	; 0x20
    10c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c2:	89 a1       	ldd	r24, Y+33	; 0x21
    10c4:	9a a1       	ldd	r25, Y+34	; 0x22
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	9a a3       	std	Y+34, r25	; 0x22
    10ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10cc:	89 a1       	ldd	r24, Y+33	; 0x21
    10ce:	9a a1       	ldd	r25, Y+34	; 0x22
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	69 f7       	brne	.-38     	; 0x10ae <HLCD_VoidSendCommand+0xd0>
    10d4:	14 c0       	rjmp	.+40     	; 0x10fe <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d6:	6b a1       	ldd	r22, Y+35	; 0x23
    10d8:	7c a1       	ldd	r23, Y+36	; 0x24
    10da:	8d a1       	ldd	r24, Y+37	; 0x25
    10dc:	9e a1       	ldd	r25, Y+38	; 0x26
    10de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9a a3       	std	Y+34, r25	; 0x22
    10e8:	89 a3       	std	Y+33, r24	; 0x21
    10ea:	89 a1       	ldd	r24, Y+33	; 0x21
    10ec:	9a a1       	ldd	r25, Y+34	; 0x22
    10ee:	9e 8f       	std	Y+30, r25	; 0x1e
    10f0:	8d 8f       	std	Y+29, r24	; 0x1d
    10f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <HLCD_VoidSendCommand+0x118>
    10fa:	9e 8f       	std	Y+30, r25	; 0x1e
    10fc:	8d 8f       	std	Y+29, r24	; 0x1d
	/* wait 1ms */
	_delay_ms(1);
	/*set High to enable*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,1);
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	62 e0       	ldi	r22, 0x02	; 2
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a0 e8       	ldi	r26, 0x80	; 128
    110e:	bf e3       	ldi	r27, 0x3F	; 63
    1110:	89 8f       	std	Y+25, r24	; 0x19
    1112:	9a 8f       	std	Y+26, r25	; 0x1a
    1114:	ab 8f       	std	Y+27, r26	; 0x1b
    1116:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	69 8d       	ldd	r22, Y+25	; 0x19
    111a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    111c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    111e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a ef       	ldi	r20, 0xFA	; 250
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8d 8b       	std	Y+21, r24	; 0x15
    1132:	9e 8b       	std	Y+22, r25	; 0x16
    1134:	af 8b       	std	Y+23, r26	; 0x17
    1136:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1138:	6d 89       	ldd	r22, Y+21	; 0x15
    113a:	7e 89       	ldd	r23, Y+22	; 0x16
    113c:	8f 89       	ldd	r24, Y+23	; 0x17
    113e:	98 8d       	ldd	r25, Y+24	; 0x18
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9c 8b       	std	Y+20, r25	; 0x14
    1156:	8b 8b       	std	Y+19, r24	; 0x13
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    115a:	6d 89       	ldd	r22, Y+21	; 0x15
    115c:	7e 89       	ldd	r23, Y+22	; 0x16
    115e:	8f 89       	ldd	r24, Y+23	; 0x17
    1160:	98 8d       	ldd	r25, Y+24	; 0x18
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	69 8d       	ldd	r22, Y+25	; 0x19
    1174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9c 8b       	std	Y+20, r25	; 0x14
    1198:	8b 8b       	std	Y+19, r24	; 0x13
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <HLCD_VoidSendCommand+0x1dc>
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9a 8b       	std	Y+18, r25	; 0x12
    11a2:	89 8b       	std	Y+17, r24	; 0x11
    11a4:	89 89       	ldd	r24, Y+17	; 0x11
    11a6:	9a 89       	ldd	r25, Y+18	; 0x12
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <HLCD_VoidSendCommand+0x1ca>
    11ac:	9a 8b       	std	Y+18, r25	; 0x12
    11ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8b 89       	ldd	r24, Y+19	; 0x13
    11b2:	9c 89       	ldd	r25, Y+20	; 0x14
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9c 8b       	std	Y+20, r25	; 0x14
    11b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	8b 89       	ldd	r24, Y+19	; 0x13
    11bc:	9c 89       	ldd	r25, Y+20	; 0x14
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <HLCD_VoidSendCommand+0x1be>
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	6d 89       	ldd	r22, Y+21	; 0x15
    11c6:	7e 89       	ldd	r23, Y+22	; 0x16
    11c8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ca:	98 8d       	ldd	r25, Y+24	; 0x18
    11cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9c 8b       	std	Y+20, r25	; 0x14
    11d6:	8b 8b       	std	Y+19, r24	; 0x13
    11d8:	8b 89       	ldd	r24, Y+19	; 0x13
    11da:	9c 89       	ldd	r25, Y+20	; 0x14
    11dc:	98 8b       	std	Y+16, r25	; 0x10
    11de:	8f 87       	std	Y+15, r24	; 0x0f
    11e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e2:	98 89       	ldd	r25, Y+16	; 0x10
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <HLCD_VoidSendCommand+0x206>
    11e8:	98 8b       	std	Y+16, r25	; 0x10
    11ea:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait 1ms */
	_delay_ms(1);
	/*set low to enable*/
	MDIO_VoidSetPinValue(Copy_EnPort,PIN2,0);
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	62 e0       	ldi	r22, 0x02	; 2
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <MDIO_VoidSetPinValue>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e4       	ldi	r27, 0x40	; 64
    11fe:	8b 87       	std	Y+11, r24	; 0x0b
    1200:	9c 87       	std	Y+12, r25	; 0x0c
    1202:	ad 87       	std	Y+13, r26	; 0x0d
    1204:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1206:	6b 85       	ldd	r22, Y+11	; 0x0b
    1208:	7c 85       	ldd	r23, Y+12	; 0x0c
    120a:	8d 85       	ldd	r24, Y+13	; 0x0d
    120c:	9e 85       	ldd	r25, Y+14	; 0x0e
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	4a ef       	ldi	r20, 0xFA	; 250
    1214:	54 e4       	ldi	r21, 0x44	; 68
    1216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	8f 83       	std	Y+7, r24	; 0x07
    1220:	98 87       	std	Y+8, r25	; 0x08
    1222:	a9 87       	std	Y+9, r26	; 0x09
    1224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1226:	6f 81       	ldd	r22, Y+7	; 0x07
    1228:	78 85       	ldd	r23, Y+8	; 0x08
    122a:	89 85       	ldd	r24, Y+9	; 0x09
    122c:	9a 85       	ldd	r25, Y+10	; 0x0a
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    123a:	88 23       	and	r24, r24
    123c:	2c f4       	brge	.+10     	; 0x1248 <HLCD_VoidSendCommand+0x26a>
		__ticks = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9e 83       	std	Y+6, r25	; 0x06
    1244:	8d 83       	std	Y+5, r24	; 0x05
    1246:	3f c0       	rjmp	.+126    	; 0x12c6 <HLCD_VoidSendCommand+0x2e8>
	else if (__tmp > 65535)
    1248:	6f 81       	ldd	r22, Y+7	; 0x07
    124a:	78 85       	ldd	r23, Y+8	; 0x08
    124c:	89 85       	ldd	r24, Y+9	; 0x09
    124e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	3f ef       	ldi	r19, 0xFF	; 255
    1254:	4f e7       	ldi	r20, 0x7F	; 127
    1256:	57 e4       	ldi	r21, 0x47	; 71
    1258:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    125c:	18 16       	cp	r1, r24
    125e:	4c f5       	brge	.+82     	; 0x12b2 <HLCD_VoidSendCommand+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1260:	6b 85       	ldd	r22, Y+11	; 0x0b
    1262:	7c 85       	ldd	r23, Y+12	; 0x0c
    1264:	8d 85       	ldd	r24, Y+13	; 0x0d
    1266:	9e 85       	ldd	r25, Y+14	; 0x0e
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	8d 83       	std	Y+5, r24	; 0x05
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <HLCD_VoidSendCommand+0x2ca>
    128a:	88 ec       	ldi	r24, 0xC8	; 200
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9c 83       	std	Y+4, r25	; 0x04
    1290:	8b 83       	std	Y+3, r24	; 0x03
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <HLCD_VoidSendCommand+0x2b8>
    129a:	9c 83       	std	Y+4, r25	; 0x04
    129c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	9e 81       	ldd	r25, Y+6	; 0x06
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	69 f7       	brne	.-38     	; 0x128a <HLCD_VoidSendCommand+0x2ac>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <HLCD_VoidSendCommand+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <HLCD_VoidSendCommand+0x2f4>
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
	/* wait 1ms */
	_delay_ms(2);
}
    12da:	ab 96       	adiw	r28, 0x2b	; 43
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <HLCD_VoidInit>:
void HLCD_VoidInit(void)
{
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	e8 97       	sbiw	r28, 0x38	; 56
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
	/*power on*/
	MDIO_VoidSetPortDirection(Copy_DataPort,0b11111111);
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	6f ef       	ldi	r22, 0xFF	; 255
    1304:	0e 94 02 10 	call	0x2004	; 0x2004 <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPinDirection(Copy_RSPort,PIN0,1);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(Copy_RWPort,PIN1,1);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(Copy_EnPort,PIN2,1);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	62 e0       	ldi	r22, 0x02	; 2
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MDIO_VoidSetPinDirection>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e2       	ldi	r26, 0x20	; 32
    132c:	b2 e4       	ldi	r27, 0x42	; 66
    132e:	8d ab       	std	Y+53, r24	; 0x35
    1330:	9e ab       	std	Y+54, r25	; 0x36
    1332:	af ab       	std	Y+55, r26	; 0x37
    1334:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1336:	6d a9       	ldd	r22, Y+53	; 0x35
    1338:	7e a9       	ldd	r23, Y+54	; 0x36
    133a:	8f a9       	ldd	r24, Y+55	; 0x37
    133c:	98 ad       	ldd	r25, Y+56	; 0x38
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	4a ef       	ldi	r20, 0xFA	; 250
    1344:	54 e4       	ldi	r21, 0x44	; 68
    1346:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	89 ab       	std	Y+49, r24	; 0x31
    1350:	9a ab       	std	Y+50, r25	; 0x32
    1352:	ab ab       	std	Y+51, r26	; 0x33
    1354:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1356:	69 a9       	ldd	r22, Y+49	; 0x31
    1358:	7a a9       	ldd	r23, Y+50	; 0x32
    135a:	8b a9       	ldd	r24, Y+51	; 0x33
    135c:	9c a9       	ldd	r25, Y+52	; 0x34
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	40 e8       	ldi	r20, 0x80	; 128
    1364:	5f e3       	ldi	r21, 0x3F	; 63
    1366:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    136a:	88 23       	and	r24, r24
    136c:	2c f4       	brge	.+10     	; 0x1378 <HLCD_VoidInit+0x8c>
		__ticks = 1;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	98 ab       	std	Y+48, r25	; 0x30
    1374:	8f a7       	std	Y+47, r24	; 0x2f
    1376:	3f c0       	rjmp	.+126    	; 0x13f6 <HLCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    1378:	69 a9       	ldd	r22, Y+49	; 0x31
    137a:	7a a9       	ldd	r23, Y+50	; 0x32
    137c:	8b a9       	ldd	r24, Y+51	; 0x33
    137e:	9c a9       	ldd	r25, Y+52	; 0x34
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	3f ef       	ldi	r19, 0xFF	; 255
    1384:	4f e7       	ldi	r20, 0x7F	; 127
    1386:	57 e4       	ldi	r21, 0x47	; 71
    1388:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    138c:	18 16       	cp	r1, r24
    138e:	4c f5       	brge	.+82     	; 0x13e2 <HLCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1390:	6d a9       	ldd	r22, Y+53	; 0x35
    1392:	7e a9       	ldd	r23, Y+54	; 0x36
    1394:	8f a9       	ldd	r24, Y+55	; 0x37
    1396:	98 ad       	ldd	r25, Y+56	; 0x38
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e2       	ldi	r20, 0x20	; 32
    139e:	51 e4       	ldi	r21, 0x41	; 65
    13a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	bc 01       	movw	r22, r24
    13aa:	cd 01       	movw	r24, r26
    13ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	98 ab       	std	Y+48, r25	; 0x30
    13b6:	8f a7       	std	Y+47, r24	; 0x2f
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <HLCD_VoidInit+0xec>
    13ba:	88 ec       	ldi	r24, 0xC8	; 200
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9e a7       	std	Y+46, r25	; 0x2e
    13c0:	8d a7       	std	Y+45, r24	; 0x2d
    13c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <HLCD_VoidInit+0xda>
    13ca:	9e a7       	std	Y+46, r25	; 0x2e
    13cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d0:	98 a9       	ldd	r25, Y+48	; 0x30
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	98 ab       	std	Y+48, r25	; 0x30
    13d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13da:	98 a9       	ldd	r25, Y+48	; 0x30
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	69 f7       	brne	.-38     	; 0x13ba <HLCD_VoidInit+0xce>
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <HLCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e2:	69 a9       	ldd	r22, Y+49	; 0x31
    13e4:	7a a9       	ldd	r23, Y+50	; 0x32
    13e6:	8b a9       	ldd	r24, Y+51	; 0x33
    13e8:	9c a9       	ldd	r25, Y+52	; 0x34
    13ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	98 ab       	std	Y+48, r25	; 0x30
    13f4:	8f a7       	std	Y+47, r24	; 0x2f
    13f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f8:	98 a9       	ldd	r25, Y+48	; 0x30
    13fa:	9c a7       	std	Y+44, r25	; 0x2c
    13fc:	8b a7       	std	Y+43, r24	; 0x2b
    13fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1400:	9c a5       	ldd	r25, Y+44	; 0x2c
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	f1 f7       	brne	.-4      	; 0x1402 <HLCD_VoidInit+0x116>
    1406:	9c a7       	std	Y+44, r25	; 0x2c
    1408:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait 40ms*/
	_delay_ms(40);
	
	/*Function set 8bit mode ... 2 line mode ... 5*8 mode */
	
	HLCD_VoidSendCommand(0b00111000);
    140a:	88 e3       	ldi	r24, 0x38	; 56
    140c:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e8       	ldi	r26, 0x80	; 128
    1416:	bf e3       	ldi	r27, 0x3F	; 63
    1418:	8f a3       	std	Y+39, r24	; 0x27
    141a:	98 a7       	std	Y+40, r25	; 0x28
    141c:	a9 a7       	std	Y+41, r26	; 0x29
    141e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1420:	6f a1       	ldd	r22, Y+39	; 0x27
    1422:	78 a5       	ldd	r23, Y+40	; 0x28
    1424:	89 a5       	ldd	r24, Y+41	; 0x29
    1426:	9a a5       	ldd	r25, Y+42	; 0x2a
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	4a ef       	ldi	r20, 0xFA	; 250
    142e:	54 e4       	ldi	r21, 0x44	; 68
    1430:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	8b a3       	std	Y+35, r24	; 0x23
    143a:	9c a3       	std	Y+36, r25	; 0x24
    143c:	ad a3       	std	Y+37, r26	; 0x25
    143e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1440:	6b a1       	ldd	r22, Y+35	; 0x23
    1442:	7c a1       	ldd	r23, Y+36	; 0x24
    1444:	8d a1       	ldd	r24, Y+37	; 0x25
    1446:	9e a1       	ldd	r25, Y+38	; 0x26
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e8       	ldi	r20, 0x80	; 128
    144e:	5f e3       	ldi	r21, 0x3F	; 63
    1450:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1454:	88 23       	and	r24, r24
    1456:	2c f4       	brge	.+10     	; 0x1462 <HLCD_VoidInit+0x176>
		__ticks = 1;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9a a3       	std	Y+34, r25	; 0x22
    145e:	89 a3       	std	Y+33, r24	; 0x21
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <HLCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    1462:	6b a1       	ldd	r22, Y+35	; 0x23
    1464:	7c a1       	ldd	r23, Y+36	; 0x24
    1466:	8d a1       	ldd	r24, Y+37	; 0x25
    1468:	9e a1       	ldd	r25, Y+38	; 0x26
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <HLCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	6f a1       	ldd	r22, Y+39	; 0x27
    147c:	78 a5       	ldd	r23, Y+40	; 0x28
    147e:	89 a5       	ldd	r24, Y+41	; 0x29
    1480:	9a a5       	ldd	r25, Y+42	; 0x2a
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e2       	ldi	r20, 0x20	; 32
    1488:	51 e4       	ldi	r21, 0x41	; 65
    148a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	bc 01       	movw	r22, r24
    1494:	cd 01       	movw	r24, r26
    1496:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	9a a3       	std	Y+34, r25	; 0x22
    14a0:	89 a3       	std	Y+33, r24	; 0x21
    14a2:	0f c0       	rjmp	.+30     	; 0x14c2 <HLCD_VoidInit+0x1d6>
    14a4:	88 ec       	ldi	r24, 0xC8	; 200
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	98 a3       	std	Y+32, r25	; 0x20
    14aa:	8f 8f       	std	Y+31, r24	; 0x1f
    14ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14ae:	98 a1       	ldd	r25, Y+32	; 0x20
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <HLCD_VoidInit+0x1c4>
    14b4:	98 a3       	std	Y+32, r25	; 0x20
    14b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b8:	89 a1       	ldd	r24, Y+33	; 0x21
    14ba:	9a a1       	ldd	r25, Y+34	; 0x22
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9a a3       	std	Y+34, r25	; 0x22
    14c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c2:	89 a1       	ldd	r24, Y+33	; 0x21
    14c4:	9a a1       	ldd	r25, Y+34	; 0x22
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	69 f7       	brne	.-38     	; 0x14a4 <HLCD_VoidInit+0x1b8>
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <HLCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14cc:	6b a1       	ldd	r22, Y+35	; 0x23
    14ce:	7c a1       	ldd	r23, Y+36	; 0x24
    14d0:	8d a1       	ldd	r24, Y+37	; 0x25
    14d2:	9e a1       	ldd	r25, Y+38	; 0x26
    14d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	9a a3       	std	Y+34, r25	; 0x22
    14de:	89 a3       	std	Y+33, r24	; 0x21
    14e0:	89 a1       	ldd	r24, Y+33	; 0x21
    14e2:	9a a1       	ldd	r25, Y+34	; 0x22
    14e4:	9e 8f       	std	Y+30, r25	; 0x1e
    14e6:	8d 8f       	std	Y+29, r24	; 0x1d
    14e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <HLCD_VoidInit+0x200>
    14f0:	9e 8f       	std	Y+30, r25	; 0x1e
    14f2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait for more than 1ms*/
 _delay_ms(1);

/*on display..on cursor...on bluting*/

HLCD_VoidSendCommand(0b00001100);
    14f4:	8c e0       	ldi	r24, 0x0C	; 12
    14f6:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	a0 e8       	ldi	r26, 0x80	; 128
    1500:	bf e3       	ldi	r27, 0x3F	; 63
    1502:	89 8f       	std	Y+25, r24	; 0x19
    1504:	9a 8f       	std	Y+26, r25	; 0x1a
    1506:	ab 8f       	std	Y+27, r26	; 0x1b
    1508:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150a:	69 8d       	ldd	r22, Y+25	; 0x19
    150c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    150e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1510:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	4a ef       	ldi	r20, 0xFA	; 250
    1518:	54 e4       	ldi	r21, 0x44	; 68
    151a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	8d 8b       	std	Y+21, r24	; 0x15
    1524:	9e 8b       	std	Y+22, r25	; 0x16
    1526:	af 8b       	std	Y+23, r26	; 0x17
    1528:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    152a:	6d 89       	ldd	r22, Y+21	; 0x15
    152c:	7e 89       	ldd	r23, Y+22	; 0x16
    152e:	8f 89       	ldd	r24, Y+23	; 0x17
    1530:	98 8d       	ldd	r25, Y+24	; 0x18
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e8       	ldi	r20, 0x80	; 128
    1538:	5f e3       	ldi	r21, 0x3F	; 63
    153a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    153e:	88 23       	and	r24, r24
    1540:	2c f4       	brge	.+10     	; 0x154c <HLCD_VoidInit+0x260>
		__ticks = 1;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	9c 8b       	std	Y+20, r25	; 0x14
    1548:	8b 8b       	std	Y+19, r24	; 0x13
    154a:	3f c0       	rjmp	.+126    	; 0x15ca <HLCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    154c:	6d 89       	ldd	r22, Y+21	; 0x15
    154e:	7e 89       	ldd	r23, Y+22	; 0x16
    1550:	8f 89       	ldd	r24, Y+23	; 0x17
    1552:	98 8d       	ldd	r25, Y+24	; 0x18
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	3f ef       	ldi	r19, 0xFF	; 255
    1558:	4f e7       	ldi	r20, 0x7F	; 127
    155a:	57 e4       	ldi	r21, 0x47	; 71
    155c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1560:	18 16       	cp	r1, r24
    1562:	4c f5       	brge	.+82     	; 0x15b6 <HLCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1564:	69 8d       	ldd	r22, Y+25	; 0x19
    1566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e2       	ldi	r20, 0x20	; 32
    1572:	51 e4       	ldi	r21, 0x41	; 65
    1574:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	9c 8b       	std	Y+20, r25	; 0x14
    158a:	8b 8b       	std	Y+19, r24	; 0x13
    158c:	0f c0       	rjmp	.+30     	; 0x15ac <HLCD_VoidInit+0x2c0>
    158e:	88 ec       	ldi	r24, 0xC8	; 200
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	9a 8b       	std	Y+18, r25	; 0x12
    1594:	89 8b       	std	Y+17, r24	; 0x11
    1596:	89 89       	ldd	r24, Y+17	; 0x11
    1598:	9a 89       	ldd	r25, Y+18	; 0x12
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <HLCD_VoidInit+0x2ae>
    159e:	9a 8b       	std	Y+18, r25	; 0x12
    15a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a2:	8b 89       	ldd	r24, Y+19	; 0x13
    15a4:	9c 89       	ldd	r25, Y+20	; 0x14
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	9c 8b       	std	Y+20, r25	; 0x14
    15aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ac:	8b 89       	ldd	r24, Y+19	; 0x13
    15ae:	9c 89       	ldd	r25, Y+20	; 0x14
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	69 f7       	brne	.-38     	; 0x158e <HLCD_VoidInit+0x2a2>
    15b4:	14 c0       	rjmp	.+40     	; 0x15de <HLCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b6:	6d 89       	ldd	r22, Y+21	; 0x15
    15b8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ba:	8f 89       	ldd	r24, Y+23	; 0x17
    15bc:	98 8d       	ldd	r25, Y+24	; 0x18
    15be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	9c 8b       	std	Y+20, r25	; 0x14
    15c8:	8b 8b       	std	Y+19, r24	; 0x13
    15ca:	8b 89       	ldd	r24, Y+19	; 0x13
    15cc:	9c 89       	ldd	r25, Y+20	; 0x14
    15ce:	98 8b       	std	Y+16, r25	; 0x10
    15d0:	8f 87       	std	Y+15, r24	; 0x0f
    15d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d4:	98 89       	ldd	r25, Y+16	; 0x10
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <HLCD_VoidInit+0x2ea>
    15da:	98 8b       	std	Y+16, r25	; 0x10
    15dc:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(1);

/*display clear*/

HLCD_VoidSendCommand(0b00000001);
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e4       	ldi	r27, 0x40	; 64
    15ec:	8b 87       	std	Y+11, r24	; 0x0b
    15ee:	9c 87       	std	Y+12, r25	; 0x0c
    15f0:	ad 87       	std	Y+13, r26	; 0x0d
    15f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4a ef       	ldi	r20, 0xFA	; 250
    1602:	54 e4       	ldi	r21, 0x44	; 68
    1604:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	8f 83       	std	Y+7, r24	; 0x07
    160e:	98 87       	std	Y+8, r25	; 0x08
    1610:	a9 87       	std	Y+9, r26	; 0x09
    1612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e8       	ldi	r20, 0x80	; 128
    1622:	5f e3       	ldi	r21, 0x3F	; 63
    1624:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1628:	88 23       	and	r24, r24
    162a:	2c f4       	brge	.+10     	; 0x1636 <HLCD_VoidInit+0x34a>
		__ticks = 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9e 83       	std	Y+6, r25	; 0x06
    1632:	8d 83       	std	Y+5, r24	; 0x05
    1634:	3f c0       	rjmp	.+126    	; 0x16b4 <HLCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	3f ef       	ldi	r19, 0xFF	; 255
    1642:	4f e7       	ldi	r20, 0x7F	; 127
    1644:	57 e4       	ldi	r21, 0x47	; 71
    1646:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    164a:	18 16       	cp	r1, r24
    164c:	4c f5       	brge	.+82     	; 0x16a0 <HLCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	7c 85       	ldd	r23, Y+12	; 0x0c
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e2       	ldi	r20, 0x20	; 32
    165c:	51 e4       	ldi	r21, 0x41	; 65
    165e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	8d 83       	std	Y+5, r24	; 0x05
    1676:	0f c0       	rjmp	.+30     	; 0x1696 <HLCD_VoidInit+0x3aa>
    1678:	88 ec       	ldi	r24, 0xC8	; 200
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9c 83       	std	Y+4, r25	; 0x04
    167e:	8b 83       	std	Y+3, r24	; 0x03
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <HLCD_VoidInit+0x398>
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	9e 83       	std	Y+6, r25	; 0x06
    1694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	00 97       	sbiw	r24, 0x00	; 0
    169c:	69 f7       	brne	.-38     	; 0x1678 <HLCD_VoidInit+0x38c>
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <HLCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a0:	6f 81       	ldd	r22, Y+7	; 0x07
    16a2:	78 85       	ldd	r23, Y+8	; 0x08
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	9e 83       	std	Y+6, r25	; 0x06
    16b2:	8d 83       	std	Y+5, r24	; 0x05
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	9e 81       	ldd	r25, Y+6	; 0x06
    16b8:	9a 83       	std	Y+2, r25	; 0x02
    16ba:	89 83       	std	Y+1, r24	; 0x01
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <HLCD_VoidInit+0x3d4>
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
	
	/*delay more than 1.53ms*/
	
	_delay_ms(2);
	
}
    16c8:	e8 96       	adiw	r28, 0x38	; 56
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <HLCD_VoidStringChar>:
void HLCD_VoidStringChar (char* str)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <HLCD_VoidStringChar+0x6>
    16e0:	0f 92       	push	r0
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	9b 83       	std	Y+3, r25	; 0x03
    16e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	0e c0       	rjmp	.+28     	; 0x170a <HLCD_VoidStringChar+0x30>
	
	while (str[i]!=('\0'))
	{
		HLCD_VoidSendChar(str[i]);
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	9b 81       	ldd	r25, Y+3	; 0x03
    16f8:	fc 01       	movw	r30, r24
    16fa:	e2 0f       	add	r30, r18
    16fc:	f3 1f       	adc	r31, r19
    16fe:	80 81       	ld	r24, Z
    1700:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
		i++;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	89 83       	std	Y+1, r24	; 0x01
}
void HLCD_VoidStringChar (char* str)
{
	u8 i=0;
	
	while (str[i]!=('\0'))
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	fc 01       	movw	r30, r24
    1716:	e2 0f       	add	r30, r18
    1718:	f3 1f       	adc	r31, r19
    171a:	80 81       	ld	r24, Z
    171c:	88 23       	and	r24, r24
    171e:	39 f7       	brne	.-50     	; 0x16ee <HLCD_VoidStringChar+0x14>
	{
		HLCD_VoidSendChar(str[i]);
		i++;
	}
	
}
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <HLCD_VoidSetPostion>:
void HLCD_VoidSetPostion(u8 Copy_U8Row,u8 Copy_U8Col)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <HLCD_VoidSetPostion+0x6>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	6a 83       	std	Y+2, r22	; 0x02
	
	if (Copy_U8Row == 0)
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	88 23       	and	r24, r24
    173e:	29 f4       	brne	.+10     	; 0x174a <HLCD_VoidSetPostion+0x1e>
	{
		HLCD_VoidSendCommand(Copy_U8Col+128);
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	80 58       	subi	r24, 0x80	; 128
    1744:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
    1748:	07 c0       	rjmp	.+14     	; 0x1758 <HLCD_VoidSetPostion+0x2c>
	}
	else if (Copy_U8Row == 1)
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	21 f4       	brne	.+8      	; 0x1758 <HLCD_VoidSetPostion+0x2c>
	{
		HLCD_VoidSendCommand(Copy_U8Col+128+64);
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	80 54       	subi	r24, 0x40	; 64
    1754:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	}
	
	
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <HLCD_SendNumber>:
void HLCD_SendNumber(u32 num)
{
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	2c 97       	sbiw	r28, 0x0c	; 12
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	69 87       	std	Y+9, r22	; 0x09
    1780:	7a 87       	std	Y+10, r23	; 0x0a
    1782:	8b 87       	std	Y+11, r24	; 0x0b
    1784:	9c 87       	std	Y+12, r25	; 0x0c
	if (0==num)
    1786:	89 85       	ldd	r24, Y+9	; 0x09
    1788:	9a 85       	ldd	r25, Y+10	; 0x0a
    178a:	ab 85       	ldd	r26, Y+11	; 0x0b
    178c:	bc 85       	ldd	r27, Y+12	; 0x0c
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	a1 05       	cpc	r26, r1
    1792:	b1 05       	cpc	r27, r1
    1794:	21 f4       	brne	.+8      	; 0x179e <HLCD_SendNumber+0x3c>
	{
		HLCD_VoidSendChar(0+48);
    1796:	80 e3       	ldi	r24, 0x30	; 48
    1798:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
    179c:	79 c0       	rjmp	.+242    	; 0x1890 <HLCD_SendNumber+0x12e>
	}
	else
	{
	u32 Loc_U32Rev=1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 e0       	ldi	r26, 0x00	; 0
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	af 83       	std	Y+7, r26	; 0x07
    17ac:	b8 87       	std	Y+8, r27	; 0x08
    17ae:	36 c0       	rjmp	.+108    	; 0x181c <HLCD_SendNumber+0xba>
	while (num>0)
	{
		Loc_U32Rev=(Loc_U32Rev*10)+num%10;
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	af 81       	ldd	r26, Y+7	; 0x07
    17b6:	b8 85       	ldd	r27, Y+8	; 0x08
    17b8:	2a e0       	ldi	r18, 0x0A	; 10
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	bc 01       	movw	r22, r24
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__mulsi3>
    17c8:	7b 01       	movw	r14, r22
    17ca:	8c 01       	movw	r16, r24
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    17d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    17d4:	2a e0       	ldi	r18, 0x0A	; 10
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	bc 01       	movw	r22, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__udivmodsi4>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8e 0d       	add	r24, r14
    17ea:	9f 1d       	adc	r25, r15
    17ec:	a0 1f       	adc	r26, r16
    17ee:	b1 1f       	adc	r27, r17
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	af 83       	std	Y+7, r26	; 0x07
    17f6:	b8 87       	std	Y+8, r27	; 0x08
		num/=10;
    17f8:	89 85       	ldd	r24, Y+9	; 0x09
    17fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    17fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    1800:	2a e0       	ldi	r18, 0x0A	; 10
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__udivmodsi4>
    1810:	da 01       	movw	r26, r20
    1812:	c9 01       	movw	r24, r18
    1814:	89 87       	std	Y+9, r24	; 0x09
    1816:	9a 87       	std	Y+10, r25	; 0x0a
    1818:	ab 87       	std	Y+11, r26	; 0x0b
    181a:	bc 87       	std	Y+12, r27	; 0x0c
		HLCD_VoidSendChar(0+48);
	}
	else
	{
	u32 Loc_U32Rev=1;
	while (num>0)
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	ab 85       	ldd	r26, Y+11	; 0x0b
    1822:	bc 85       	ldd	r27, Y+12	; 0x0c
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	a1 05       	cpc	r26, r1
    1828:	b1 05       	cpc	r27, r1
    182a:	11 f6       	brne	.-124    	; 0x17b0 <HLCD_SendNumber+0x4e>
    182c:	28 c0       	rjmp	.+80     	; 0x187e <HLCD_SendNumber+0x11c>
		Loc_U32Rev=(Loc_U32Rev*10)+num%10;
		num/=10;
	}
	while(Loc_U32Rev>1)
	{
	   u32 n=Loc_U32Rev%10;
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	af 81       	ldd	r26, Y+7	; 0x07
    1834:	b8 85       	ldd	r27, Y+8	; 0x08
    1836:	2a e0       	ldi	r18, 0x0A	; 10
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	bc 01       	movw	r22, r24
    1840:	cd 01       	movw	r24, r26
    1842:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__udivmodsi4>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	ab 83       	std	Y+3, r26	; 0x03
    1850:	bc 83       	std	Y+4, r27	; 0x04
	   HLCD_VoidSendChar(n+48);
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	80 5d       	subi	r24, 0xD0	; 208
    1856:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	   Loc_U32Rev=Loc_U32Rev/10;
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	af 81       	ldd	r26, Y+7	; 0x07
    1860:	b8 85       	ldd	r27, Y+8	; 0x08
    1862:	2a e0       	ldi	r18, 0x0A	; 10
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__udivmodsi4>
    1872:	da 01       	movw	r26, r20
    1874:	c9 01       	movw	r24, r18
    1876:	8d 83       	std	Y+5, r24	; 0x05
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	af 83       	std	Y+7, r26	; 0x07
    187c:	b8 87       	std	Y+8, r27	; 0x08
	while (num>0)
	{
		Loc_U32Rev=(Loc_U32Rev*10)+num%10;
		num/=10;
	}
	while(Loc_U32Rev>1)
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	af 81       	ldd	r26, Y+7	; 0x07
    1884:	b8 85       	ldd	r27, Y+8	; 0x08
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	91 05       	cpc	r25, r1
    188a:	a1 05       	cpc	r26, r1
    188c:	b1 05       	cpc	r27, r1
    188e:	78 f6       	brcc	.-98     	; 0x182e <HLCD_SendNumber+0xcc>
	   u32 n=Loc_U32Rev%10;
	   HLCD_VoidSendChar(n+48);
	   Loc_U32Rev=Loc_U32Rev/10;
	}
	}
}
    1890:	2c 96       	adiw	r28, 0x0c	; 12
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	08 95       	ret

000018aa <HLCD_DrawCharStand>:
void HLCD_DrawCharStand(void)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62

	HLCD_VoidSendCommand(64);
    18b2:	80 e4       	ldi	r24, 0x40	; 64
    18b4:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	/*char Standup */

	HLCD_VoidSendChar(0b11111);
    18b8:	8f e1       	ldi	r24, 0x1F	; 31
    18ba:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01010);
    18be:	8a e0       	ldi	r24, 0x0A	; 10
    18c0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    18c4:	8e e0       	ldi	r24, 0x0E	; 14
    18c6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b11111);
    18ca:	8f e1       	ldi	r24, 0x1F	; 31
    18cc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    18d0:	84 e0       	ldi	r24, 0x04	; 4
    18d2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    18d6:	8e e0       	ldi	r24, 0x0E	; 14
    18d8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01010);
    18dc:	8a e0       	ldi	r24, 0x0A	; 10
    18de:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01010);
    18e2:	8a e0       	ldi	r24, 0x0A	; 10
    18e4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>

	HLCD_VoidSendCommand(128+64+3);
    18e8:	83 ec       	ldi	r24, 0xC3	; 195
    18ea:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0);
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
}
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <HLCD_DrawCharMoveRight>:
void HLCD_DrawCharMoveRight(u8 r,u8 c)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <HLCD_DrawCharMoveRight+0x6>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	6a 83       	std	Y+2, r22	; 0x02

	HLCD_VoidSendCommand(64+8);
    1908:	88 e4       	ldi	r24, 0x48	; 72
    190a:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>

	/*char move right */
	HLCD_VoidSendChar(0b11111);
    190e:	8f e1       	ldi	r24, 0x1F	; 31
    1910:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01010);
    1914:	8a e0       	ldi	r24, 0x0A	; 10
    1916:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    191a:	8e e0       	ldi	r24, 0x0E	; 14
    191c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b11111);
    1920:	8f e1       	ldi	r24, 0x1F	; 31
    1922:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    1926:	84 e0       	ldi	r24, 0x04	; 4
    1928:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    192c:	8e e0       	ldi	r24, 0x0E	; 14
    192e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01010);
    1932:	8a e0       	ldi	r24, 0x0A	; 10
    1934:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01001);
    1938:	89 e0       	ldi	r24, 0x09	; 9
    193a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>

	HLCD_VoidSendCommand(128+r+c);
    193e:	99 81       	ldd	r25, Y+1	; 0x01
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	89 0f       	add	r24, r25
    1944:	80 58       	subi	r24, 0x80	; 128
    1946:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(1);
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <HLCD_DrawCharMoveLeft>:
void HLCD_DrawCharMoveLeft(void)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62

	HLCD_VoidSendCommand(64+8+8);
    1962:	80 e5       	ldi	r24, 0x50	; 80
    1964:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>

	/*char move right */
	HLCD_VoidSendChar(0b11111);
    1968:	8f e1       	ldi	r24, 0x1F	; 31
    196a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01010);
    196e:	8a e0       	ldi	r24, 0x0A	; 10
    1970:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1974:	8e e0       	ldi	r24, 0x0E	; 14
    1976:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b11111);
    197a:	8f e1       	ldi	r24, 0x1F	; 31
    197c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    1980:	84 e0       	ldi	r24, 0x04	; 4
    1982:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1986:	8e e0       	ldi	r24, 0x0E	; 14
    1988:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01010);
    198c:	8a e0       	ldi	r24, 0x0A	; 10
    198e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b10010);
    1992:	82 e1       	ldi	r24, 0x12	; 18
    1994:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>

	HLCD_VoidSendCommand(128);
    1998:	80 e8       	ldi	r24, 0x80	; 128
    199a:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(2);
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
}
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <HLCD_DrawCharJump>:
void HLCD_DrawCharJump(u8 r,u8 c)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <HLCD_DrawCharJump+0x6>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6a 83       	std	Y+2, r22	; 0x02

	HLCD_VoidSendCommand(64+8+8+8);
    19b8:	88 e5       	ldi	r24, 0x58	; 88
    19ba:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>

	/*char Jump */
	HLCD_VoidSendChar(0b11111);
    19be:	8f e1       	ldi	r24, 0x1F	; 31
    19c0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
    HLCD_VoidSendChar(0b01010);
    19c4:	8a e0       	ldi	r24, 0x0A	; 10
    19c6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    19ca:	8e e0       	ldi	r24, 0x0E	; 14
    19cc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b11111);
    19d0:	8f e1       	ldi	r24, 0x1F	; 31
    19d2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    19d6:	84 e0       	ldi	r24, 0x04	; 4
    19d8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    19dc:	8e e0       	ldi	r24, 0x0E	; 14
    19de:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b11011);
    19e2:	8b e1       	ldi	r24, 0x1B	; 27
    19e4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00000);
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>

	HLCD_VoidSendCommand(128+r+c);
    19ee:	99 81       	ldd	r25, Y+1	; 0x01
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	89 0f       	add	r24, r25
    19f4:	80 58       	subi	r24, 0x80	; 128
    19f6:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(3);
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
}
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <HLCD_DrawCharTree1>:
void HLCD_DrawCharTree1(u8 i)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	0f 92       	push	r0
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	89 83       	std	Y+1, r24	; 0x01
	
	HLCD_VoidSendCommand(64+8+8+8+8);
    1a16:	80 e6       	ldi	r24, 0x60	; 96
    1a18:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>

	HLCD_VoidSendChar(0b10101);
    1a1c:	85 e1       	ldi	r24, 0x15	; 21
    1a1e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b10101);
    1a22:	85 e1       	ldi	r24, 0x15	; 21
    1a24:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b10101);
    1a28:	85 e1       	ldi	r24, 0x15	; 21
    1a2a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b11111);
    1a2e:	8f e1       	ldi	r24, 0x1F	; 31
    1a30:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1a34:	8e e0       	ldi	r24, 0x0E	; 14
    1a36:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1a3a:	8e e0       	ldi	r24, 0x0E	; 14
    1a3c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1a40:	8e e0       	ldi	r24, 0x0E	; 14
    1a42:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1a46:	8e e0       	ldi	r24, 0x0E	; 14
    1a48:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendCommand(128+64+i);
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	80 54       	subi	r24, 0x40	; 64
    1a50:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(4);
    1a54:	84 e0       	ldi	r24, 0x04	; 4
    1a56:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
}
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <HLCD_DrawCharTree2>:
void HLCD_DrawCharTree2(u8 i)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	0f 92       	push	r0
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	89 83       	std	Y+1, r24	; 0x01

	HLCD_VoidSendCommand(64+8+8+8+8+8);
    1a6e:	88 e6       	ldi	r24, 0x68	; 104
    1a70:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>

	HLCD_VoidSendChar(0b10101);
    1a74:	85 e1       	ldi	r24, 0x15	; 21
    1a76:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b10101);
    1a7a:	85 e1       	ldi	r24, 0x15	; 21
    1a7c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b10101);
    1a80:	85 e1       	ldi	r24, 0x15	; 21
    1a82:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b11111);
    1a86:	8f e1       	ldi	r24, 0x1F	; 31
    1a88:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1a8c:	8e e0       	ldi	r24, 0x0E	; 14
    1a8e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1a92:	8e e0       	ldi	r24, 0x0E	; 14
    1a94:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1a98:	8e e0       	ldi	r24, 0x0E	; 14
    1a9a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1a9e:	8e e0       	ldi	r24, 0x0E	; 14
    1aa0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendCommand(128+64+i);
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	80 54       	subi	r24, 0x40	; 64
    1aa8:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(5);
    1aac:	85 e0       	ldi	r24, 0x05	; 5
    1aae:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
}
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <HLCD_DrawCharTree3>:
void HLCD_DrawCharTree3(u8 i)
{
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01

	HLCD_VoidSendCommand(64+8+8+8+8+8+8);
    1ac6:	80 e7       	ldi	r24, 0x70	; 112
    1ac8:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>

	HLCD_VoidSendChar(0b10101);
    1acc:	85 e1       	ldi	r24, 0x15	; 21
    1ace:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b10101);
    1ad2:	85 e1       	ldi	r24, 0x15	; 21
    1ad4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b10101);
    1ad8:	85 e1       	ldi	r24, 0x15	; 21
    1ada:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b11111);
    1ade:	8f e1       	ldi	r24, 0x1F	; 31
    1ae0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1ae4:	8e e0       	ldi	r24, 0x0E	; 14
    1ae6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1aea:	8e e0       	ldi	r24, 0x0E	; 14
    1aec:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1af0:	8e e0       	ldi	r24, 0x0E	; 14
    1af2:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01110);
    1af6:	8e e0       	ldi	r24, 0x0E	; 14
    1af8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
	HLCD_VoidSendCommand(128+64+i);
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	80 54       	subi	r24, 0x40	; 64
    1b00:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(6);
    1b04:	86 e0       	ldi	r24, 0x06	; 6
    1b06:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HLCD_VoidSendChar>
}
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <MDIO_VoidSetPinDirection>:
#include "MDIO_Private.h"
#include "MDIO_Interface.h"


void MDIO_VoidSetPinDirection(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Dir)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	27 97       	sbiw	r28, 0x07	; 7
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	6a 83       	std	Y+2, r22	; 0x02
    1b2a:	4b 83       	std	Y+3, r20	; 0x03
	
	if(1==Copy_U8Dir)
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <MDIO_VoidSetPinDirection+0x22>
    1b32:	6f c0       	rjmp	.+222    	; 0x1c12 <MDIO_VoidSetPinDirection+0x100>
	{
		switch (Copy_U8Port)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	3f 83       	std	Y+7, r19	; 0x07
    1b3c:	2e 83       	std	Y+6, r18	; 0x06
    1b3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b40:	9f 81       	ldd	r25, Y+7	; 0x07
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	91 05       	cpc	r25, r1
    1b46:	49 f1       	breq	.+82     	; 0x1b9a <MDIO_VoidSetPinDirection+0x88>
    1b48:	2e 81       	ldd	r18, Y+6	; 0x06
    1b4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	2c f4       	brge	.+10     	; 0x1b5c <MDIO_VoidSetPinDirection+0x4a>
    1b52:	8e 81       	ldd	r24, Y+6	; 0x06
    1b54:	9f 81       	ldd	r25, Y+7	; 0x07
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	61 f0       	breq	.+24     	; 0x1b72 <MDIO_VoidSetPinDirection+0x60>
    1b5a:	d2 c0       	rjmp	.+420    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
    1b5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	71 f1       	breq	.+92     	; 0x1bc2 <MDIO_VoidSetPinDirection+0xb0>
    1b66:	8e 81       	ldd	r24, Y+6	; 0x06
    1b68:	9f 81       	ldd	r25, Y+7	; 0x07
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	e9 f1       	breq	.+122    	; 0x1bea <MDIO_VoidSetPinDirection+0xd8>
    1b70:	c7 c0       	rjmp	.+398    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
		{
			case PORTA: SET_BIT(DDRA_REG,Copy_U8Pin); break;
    1b72:	aa e3       	ldi	r26, 0x3A	; 58
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	ea e3       	ldi	r30, 0x3A	; 58
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <MDIO_VoidSetPinDirection+0x7e>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <MDIO_VoidSetPinDirection+0x7a>
    1b94:	84 2b       	or	r24, r20
    1b96:	8c 93       	st	X, r24
    1b98:	b3 c0       	rjmp	.+358    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTB: SET_BIT(DDRB_REG,Copy_U8Pin); break;
    1b9a:	a7 e3       	ldi	r26, 0x37	; 55
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e7 e3       	ldi	r30, 0x37	; 55
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 2e       	mov	r0, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <MDIO_VoidSetPinDirection+0xa6>
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	0a 94       	dec	r0
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <MDIO_VoidSetPinDirection+0xa2>
    1bbc:	84 2b       	or	r24, r20
    1bbe:	8c 93       	st	X, r24
    1bc0:	9f c0       	rjmp	.+318    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTC: SET_BIT(DDRC_REG,Copy_U8Pin); break;
    1bc2:	a4 e3       	ldi	r26, 0x34	; 52
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e4 e3       	ldi	r30, 0x34	; 52
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <MDIO_VoidSetPinDirection+0xce>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <MDIO_VoidSetPinDirection+0xca>
    1be4:	84 2b       	or	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	8b c0       	rjmp	.+278    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTD: SET_BIT(DDRD_REG,Copy_U8Pin); break;
    1bea:	a2 e3       	ldi	r26, 0x32	; 50
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e2 e3       	ldi	r30, 0x32	; 50
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <MDIO_VoidSetPinDirection+0xf6>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <MDIO_VoidSetPinDirection+0xf2>
    1c0c:	84 2b       	or	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	77 c0       	rjmp	.+238    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
			default: /* do nothing */;
		}
		
	}
	else if (0==Copy_U8Dir)
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	88 23       	and	r24, r24
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <MDIO_VoidSetPinDirection+0x108>
    1c18:	73 c0       	rjmp	.+230    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
	
	{
		switch (Copy_U8Port)
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	3d 83       	std	Y+5, r19	; 0x05
    1c22:	2c 83       	std	Y+4, r18	; 0x04
    1c24:	8c 81       	ldd	r24, Y+4	; 0x04
    1c26:	9d 81       	ldd	r25, Y+5	; 0x05
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	59 f1       	breq	.+86     	; 0x1c84 <MDIO_VoidSetPinDirection+0x172>
    1c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c30:	3d 81       	ldd	r19, Y+5	; 0x05
    1c32:	22 30       	cpi	r18, 0x02	; 2
    1c34:	31 05       	cpc	r19, r1
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <MDIO_VoidSetPinDirection+0x130>
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f0       	breq	.+26     	; 0x1c5a <MDIO_VoidSetPinDirection+0x148>
    1c40:	5f c0       	rjmp	.+190    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
    1c42:	2c 81       	ldd	r18, Y+4	; 0x04
    1c44:	3d 81       	ldd	r19, Y+5	; 0x05
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	89 f1       	breq	.+98     	; 0x1cae <MDIO_VoidSetPinDirection+0x19c>
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	83 30       	cpi	r24, 0x03	; 3
    1c52:	91 05       	cpc	r25, r1
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <MDIO_VoidSetPinDirection+0x146>
    1c56:	40 c0       	rjmp	.+128    	; 0x1cd8 <MDIO_VoidSetPinDirection+0x1c6>
    1c58:	53 c0       	rjmp	.+166    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
		{
			case PORTA: CLR_BIT(DDRA_REG,Copy_U8Pin); break;
    1c5a:	aa e3       	ldi	r26, 0x3A	; 58
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	ea e3       	ldi	r30, 0x3A	; 58
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	48 2f       	mov	r20, r24
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 2e       	mov	r0, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <MDIO_VoidSetPinDirection+0x166>
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	0a 94       	dec	r0
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <MDIO_VoidSetPinDirection+0x162>
    1c7c:	80 95       	com	r24
    1c7e:	84 23       	and	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	3e c0       	rjmp	.+124    	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTB: CLR_BIT(DDRB_REG,Copy_U8Pin); break;
    1c84:	a7 e3       	ldi	r26, 0x37	; 55
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	e7 e3       	ldi	r30, 0x37	; 55
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <MDIO_VoidSetPinDirection+0x190>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <MDIO_VoidSetPinDirection+0x18c>
    1ca6:	80 95       	com	r24
    1ca8:	84 23       	and	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	29 c0       	rjmp	.+82     	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTC: CLR_BIT(DDRC_REG,Copy_U8Pin); break;
    1cae:	a4 e3       	ldi	r26, 0x34	; 52
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e4 e3       	ldi	r30, 0x34	; 52
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 2e       	mov	r0, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <MDIO_VoidSetPinDirection+0x1ba>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	0a 94       	dec	r0
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <MDIO_VoidSetPinDirection+0x1b6>
    1cd0:	80 95       	com	r24
    1cd2:	84 23       	and	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <MDIO_VoidSetPinDirection+0x1ee>
			case PORTD: CLR_BIT(DDRD_REG,Copy_U8Pin); break;
    1cd8:	a2 e3       	ldi	r26, 0x32	; 50
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e2 e3       	ldi	r30, 0x32	; 50
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <MDIO_VoidSetPinDirection+0x1e4>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <MDIO_VoidSetPinDirection+0x1e0>
    1cfa:	80 95       	com	r24
    1cfc:	84 23       	and	r24, r20
    1cfe:	8c 93       	st	X, r24
	else 
	{
		
		/* Do NOthing*/
	}
}
    1d00:	27 96       	adiw	r28, 0x07	; 7
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <MDIO_VoidSetPinValue>:


void MDIO_VoidSetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin,u8 Copy_U8Val)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	27 97       	sbiw	r28, 0x07	; 7
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	6a 83       	std	Y+2, r22	; 0x02
    1d2a:	4b 83       	std	Y+3, r20	; 0x03
 if(0==Copy_U8Val)
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	88 23       	and	r24, r24
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <MDIO_VoidSetPinValue+0x22>
    1d32:	74 c0       	rjmp	.+232    	; 0x1e1c <MDIO_VoidSetPinValue+0x10a>
 {
		switch (Copy_U8Port)
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3f 83       	std	Y+7, r19	; 0x07
    1d3c:	2e 83       	std	Y+6, r18	; 0x06
    1d3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d40:	9f 81       	ldd	r25, Y+7	; 0x07
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	59 f1       	breq	.+86     	; 0x1d9e <MDIO_VoidSetPinValue+0x8c>
    1d48:	2e 81       	ldd	r18, Y+6	; 0x06
    1d4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <MDIO_VoidSetPinValue+0x4a>
    1d52:	8e 81       	ldd	r24, Y+6	; 0x06
    1d54:	9f 81       	ldd	r25, Y+7	; 0x07
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f0       	breq	.+26     	; 0x1d74 <MDIO_VoidSetPinValue+0x62>
    1d5a:	d2 c0       	rjmp	.+420    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
    1d5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	89 f1       	breq	.+98     	; 0x1dc8 <MDIO_VoidSetPinValue+0xb6>
    1d66:	8e 81       	ldd	r24, Y+6	; 0x06
    1d68:	9f 81       	ldd	r25, Y+7	; 0x07
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <MDIO_VoidSetPinValue+0x60>
    1d70:	40 c0       	rjmp	.+128    	; 0x1df2 <MDIO_VoidSetPinValue+0xe0>
    1d72:	c6 c0       	rjmp	.+396    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
		{
			case PORTA: CLR_BIT(PORTA_REG,Copy_U8Pin); break;
    1d74:	ab e3       	ldi	r26, 0x3B	; 59
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <MDIO_VoidSetPinValue+0x80>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <MDIO_VoidSetPinValue+0x7c>
    1d96:	80 95       	com	r24
    1d98:	84 23       	and	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	b1 c0       	rjmp	.+354    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
			case PORTB: CLR_BIT(PORTB_REG,Copy_U8Pin); break;
    1d9e:	a8 e3       	ldi	r26, 0x38	; 56
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e8 e3       	ldi	r30, 0x38	; 56
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <MDIO_VoidSetPinValue+0xaa>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <MDIO_VoidSetPinValue+0xa6>
    1dc0:	80 95       	com	r24
    1dc2:	84 23       	and	r24, r20
    1dc4:	8c 93       	st	X, r24
    1dc6:	9c c0       	rjmp	.+312    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
			case PORTC: CLR_BIT(PORTC_REG,Copy_U8Pin); break;
    1dc8:	a5 e3       	ldi	r26, 0x35	; 53
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e5 e3       	ldi	r30, 0x35	; 53
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <MDIO_VoidSetPinValue+0xd4>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <MDIO_VoidSetPinValue+0xd0>
    1dea:	80 95       	com	r24
    1dec:	84 23       	and	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	87 c0       	rjmp	.+270    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
			case PORTD: CLR_BIT(PORTD_REG,Copy_U8Pin); break;
    1df2:	a1 e3       	ldi	r26, 0x31	; 49
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e1 e3       	ldi	r30, 0x31	; 49
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <MDIO_VoidSetPinValue+0xfe>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <MDIO_VoidSetPinValue+0xfa>
    1e14:	80 95       	com	r24
    1e16:	84 23       	and	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	72 c0       	rjmp	.+228    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
			default: /* do nothing */;
		}
 }
 else if(1==Copy_U8Val)
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <MDIO_VoidSetPinValue+0x112>
    1e22:	6e c0       	rjmp	.+220    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
 	{
 		switch(Copy_U8Port)
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	3d 83       	std	Y+5, r19	; 0x05
    1e2c:	2c 83       	std	Y+4, r18	; 0x04
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	9d 81       	ldd	r25, Y+5	; 0x05
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	91 05       	cpc	r25, r1
    1e36:	49 f1       	breq	.+82     	; 0x1e8a <MDIO_VoidSetPinValue+0x178>
    1e38:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <MDIO_VoidSetPinValue+0x13a>
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	9d 81       	ldd	r25, Y+5	; 0x05
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	61 f0       	breq	.+24     	; 0x1e62 <MDIO_VoidSetPinValue+0x150>
    1e4a:	5a c0       	rjmp	.+180    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	71 f1       	breq	.+92     	; 0x1eb2 <MDIO_VoidSetPinValue+0x1a0>
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	e9 f1       	breq	.+122    	; 0x1eda <MDIO_VoidSetPinValue+0x1c8>
    1e60:	4f c0       	rjmp	.+158    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
 		{
 			case PORTA:SET_BIT(PORTA_REG,Copy_U8Pin) ; break;
    1e62:	ab e3       	ldi	r26, 0x3B	; 59
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	eb e3       	ldi	r30, 0x3B	; 59
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	48 2f       	mov	r20, r24
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	02 2e       	mov	r0, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <MDIO_VoidSetPinValue+0x16e>
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	0a 94       	dec	r0
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <MDIO_VoidSetPinValue+0x16a>
    1e84:	84 2b       	or	r24, r20
    1e86:	8c 93       	st	X, r24
    1e88:	3b c0       	rjmp	.+118    	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
 			case PORTB:SET_BIT(PORTB_REG,Copy_U8Pin) ; break;
    1e8a:	a8 e3       	ldi	r26, 0x38	; 56
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e8 e3       	ldi	r30, 0x38	; 56
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	48 2f       	mov	r20, r24
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	02 2e       	mov	r0, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <MDIO_VoidSetPinValue+0x196>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	0a 94       	dec	r0
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <MDIO_VoidSetPinValue+0x192>
    1eac:	84 2b       	or	r24, r20
    1eae:	8c 93       	st	X, r24
    1eb0:	27 c0       	rjmp	.+78     	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
 			case PORTC:SET_BIT(PORTC_REG,Copy_U8Pin) ; break;
    1eb2:	a5 e3       	ldi	r26, 0x35	; 53
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e5 e3       	ldi	r30, 0x35	; 53
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <MDIO_VoidSetPinValue+0x1be>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <MDIO_VoidSetPinValue+0x1ba>
    1ed4:	84 2b       	or	r24, r20
    1ed6:	8c 93       	st	X, r24
    1ed8:	13 c0       	rjmp	.+38     	; 0x1f00 <MDIO_VoidSetPinValue+0x1ee>
 			case PORTD:SET_BIT(PORTD_REG,Copy_U8Pin) ; break;
    1eda:	a1 e3       	ldi	r26, 0x31	; 49
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e1 e3       	ldi	r30, 0x31	; 49
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	48 2f       	mov	r20, r24
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 2e       	mov	r0, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <MDIO_VoidSetPinValue+0x1e6>
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	0a 94       	dec	r0
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <MDIO_VoidSetPinValue+0x1e2>
    1efc:	84 2b       	or	r24, r20
    1efe:	8c 93       	st	X, r24
 		/* do nothing */
 	}
		
	
	
}
    1f00:	27 96       	adiw	r28, 0x07	; 7
    1f02:	0f b6       	in	r0, 0x3f	; 63
    1f04:	f8 94       	cli
    1f06:	de bf       	out	0x3e, r29	; 62
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	cd bf       	out	0x3d, r28	; 61
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <MDIO_u8GetPinValue+0x6>
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <MDIO_u8GetPinValue+0x8>
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	8a 83       	std	Y+2, r24	; 0x02
    1f22:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_U8RetValue ;
	switch (Copy_U8Port)
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	3d 83       	std	Y+5, r19	; 0x05
    1f2c:	2c 83       	std	Y+4, r18	; 0x04
    1f2e:	4c 81       	ldd	r20, Y+4	; 0x04
    1f30:	5d 81       	ldd	r21, Y+5	; 0x05
    1f32:	41 30       	cpi	r20, 0x01	; 1
    1f34:	51 05       	cpc	r21, r1
    1f36:	41 f1       	breq	.+80     	; 0x1f88 <MDIO_u8GetPinValue+0x76>
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	91 05       	cpc	r25, r1
    1f40:	34 f4       	brge	.+12     	; 0x1f4e <MDIO_u8GetPinValue+0x3c>
    1f42:	2c 81       	ldd	r18, Y+4	; 0x04
    1f44:	3d 81       	ldd	r19, Y+5	; 0x05
    1f46:	21 15       	cp	r18, r1
    1f48:	31 05       	cpc	r19, r1
    1f4a:	61 f0       	breq	.+24     	; 0x1f64 <MDIO_u8GetPinValue+0x52>
    1f4c:	52 c0       	rjmp	.+164    	; 0x1ff2 <MDIO_u8GetPinValue+0xe0>
    1f4e:	4c 81       	ldd	r20, Y+4	; 0x04
    1f50:	5d 81       	ldd	r21, Y+5	; 0x05
    1f52:	42 30       	cpi	r20, 0x02	; 2
    1f54:	51 05       	cpc	r21, r1
    1f56:	51 f1       	breq	.+84     	; 0x1fac <MDIO_u8GetPinValue+0x9a>
    1f58:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5c:	83 30       	cpi	r24, 0x03	; 3
    1f5e:	91 05       	cpc	r25, r1
    1f60:	b9 f1       	breq	.+110    	; 0x1fd0 <MDIO_u8GetPinValue+0xbe>
    1f62:	47 c0       	rjmp	.+142    	; 0x1ff2 <MDIO_u8GetPinValue+0xe0>
	{
		
		case PORTA: LOC_U8RetValue=GET_BIT(PINA_REG,Copy_U8Pin); break;
    1f64:	e9 e3       	ldi	r30, 0x39	; 57
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a9 01       	movw	r20, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <MDIO_u8GetPinValue+0x6a>
    1f78:	55 95       	asr	r21
    1f7a:	47 95       	ror	r20
    1f7c:	8a 95       	dec	r24
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <MDIO_u8GetPinValue+0x66>
    1f80:	ca 01       	movw	r24, r20
    1f82:	81 70       	andi	r24, 0x01	; 1
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	35 c0       	rjmp	.+106    	; 0x1ff2 <MDIO_u8GetPinValue+0xe0>
		case PORTB: LOC_U8RetValue=GET_BIT(PINB_REG,Copy_U8Pin); break;
    1f88:	e6 e3       	ldi	r30, 0x36	; 54
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a9 01       	movw	r20, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <MDIO_u8GetPinValue+0x8e>
    1f9c:	55 95       	asr	r21
    1f9e:	47 95       	ror	r20
    1fa0:	8a 95       	dec	r24
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <MDIO_u8GetPinValue+0x8a>
    1fa4:	ca 01       	movw	r24, r20
    1fa6:	81 70       	andi	r24, 0x01	; 1
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	23 c0       	rjmp	.+70     	; 0x1ff2 <MDIO_u8GetPinValue+0xe0>
		case PORTC: LOC_U8RetValue=GET_BIT(PINC_REG,Copy_U8Pin); break;
    1fac:	e3 e3       	ldi	r30, 0x33	; 51
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a9 01       	movw	r20, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <MDIO_u8GetPinValue+0xb2>
    1fc0:	55 95       	asr	r21
    1fc2:	47 95       	ror	r20
    1fc4:	8a 95       	dec	r24
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <MDIO_u8GetPinValue+0xae>
    1fc8:	ca 01       	movw	r24, r20
    1fca:	81 70       	andi	r24, 0x01	; 1
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	11 c0       	rjmp	.+34     	; 0x1ff2 <MDIO_u8GetPinValue+0xe0>
		case PORTD: LOC_U8RetValue=GET_BIT(PIND_REG,Copy_U8Pin); break;
    1fd0:	e0 e3       	ldi	r30, 0x30	; 48
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a9 01       	movw	r20, r18
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <MDIO_u8GetPinValue+0xd6>
    1fe4:	55 95       	asr	r21
    1fe6:	47 95       	ror	r20
    1fe8:	8a 95       	dec	r24
    1fea:	e2 f7       	brpl	.-8      	; 0x1fe4 <MDIO_u8GetPinValue+0xd2>
    1fec:	ca 01       	movw	r24, r20
    1fee:	81 70       	andi	r24, 0x01	; 1
    1ff0:	89 83       	std	Y+1, r24	; 0x01
		default : /* Do NOthing*/;
	}
	return LOC_U8RetValue;
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <MDIO_VoidSetPortDirection>:
void MDIO_VoidSetPortDirection(u8 Copy_U8Port,u8 Copy_U8Dir)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <MDIO_VoidSetPortDirection+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <MDIO_VoidSetPortDirection+0x8>
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3c 83       	std	Y+4, r19	; 0x04
    201c:	2b 83       	std	Y+3, r18	; 0x03
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	91 05       	cpc	r25, r1
    2026:	d1 f0       	breq	.+52     	; 0x205c <MDIO_VoidSetPortDirection+0x58>
    2028:	2b 81       	ldd	r18, Y+3	; 0x03
    202a:	3c 81       	ldd	r19, Y+4	; 0x04
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	2c f4       	brge	.+10     	; 0x203c <MDIO_VoidSetPortDirection+0x38>
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	61 f0       	breq	.+24     	; 0x2052 <MDIO_VoidSetPortDirection+0x4e>
    203a:	1e c0       	rjmp	.+60     	; 0x2078 <MDIO_VoidSetPortDirection+0x74>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	81 f0       	breq	.+32     	; 0x2066 <MDIO_VoidSetPortDirection+0x62>
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	91 05       	cpc	r25, r1
    204e:	81 f0       	breq	.+32     	; 0x2070 <MDIO_VoidSetPortDirection+0x6c>
    2050:	13 c0       	rjmp	.+38     	; 0x2078 <MDIO_VoidSetPortDirection+0x74>
	{
	case PORTA: DDRA_REG = Copy_U8Dir; break;
    2052:	ea e3       	ldi	r30, 0x3A	; 58
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	80 83       	st	Z, r24
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <MDIO_VoidSetPortDirection+0x74>
	case PORTB: DDRB_REG = Copy_U8Dir; break;
    205c:	e7 e3       	ldi	r30, 0x37	; 55
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	80 83       	st	Z, r24
    2064:	09 c0       	rjmp	.+18     	; 0x2078 <MDIO_VoidSetPortDirection+0x74>
	case PORTC: DDRC_REG = Copy_U8Dir; break;
    2066:	e4 e3       	ldi	r30, 0x34	; 52
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	80 83       	st	Z, r24
    206e:	04 c0       	rjmp	.+8      	; 0x2078 <MDIO_VoidSetPortDirection+0x74>
	case PORTD: DDRD_REG = Copy_U8Dir; break;
    2070:	e2 e3       	ldi	r30, 0x32	; 50
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	80 83       	st	Z, r24
	default : /* Do NOthing*/;
}
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <MDIO_VoidSetPortValue>:

void MDIO_VoidSetPortValue(u8 Copy_U8Port,u8 Copy_U8Val)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <MDIO_VoidSetPortValue+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <MDIO_VoidSetPortValue+0x8>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	3c 83       	std	Y+4, r19	; 0x04
    209e:	2b 83       	std	Y+3, r18	; 0x03
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	81 30       	cpi	r24, 0x01	; 1
    20a6:	91 05       	cpc	r25, r1
    20a8:	d1 f0       	breq	.+52     	; 0x20de <MDIO_VoidSetPortValue+0x58>
    20aa:	2b 81       	ldd	r18, Y+3	; 0x03
    20ac:	3c 81       	ldd	r19, Y+4	; 0x04
    20ae:	22 30       	cpi	r18, 0x02	; 2
    20b0:	31 05       	cpc	r19, r1
    20b2:	2c f4       	brge	.+10     	; 0x20be <MDIO_VoidSetPortValue+0x38>
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	61 f0       	breq	.+24     	; 0x20d4 <MDIO_VoidSetPortValue+0x4e>
    20bc:	1e c0       	rjmp	.+60     	; 0x20fa <MDIO_VoidSetPortValue+0x74>
    20be:	2b 81       	ldd	r18, Y+3	; 0x03
    20c0:	3c 81       	ldd	r19, Y+4	; 0x04
    20c2:	22 30       	cpi	r18, 0x02	; 2
    20c4:	31 05       	cpc	r19, r1
    20c6:	81 f0       	breq	.+32     	; 0x20e8 <MDIO_VoidSetPortValue+0x62>
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	91 05       	cpc	r25, r1
    20d0:	81 f0       	breq	.+32     	; 0x20f2 <MDIO_VoidSetPortValue+0x6c>
    20d2:	13 c0       	rjmp	.+38     	; 0x20fa <MDIO_VoidSetPortValue+0x74>
	{
	case PORTA: PORTA_REG = Copy_U8Val; break;
    20d4:	eb e3       	ldi	r30, 0x3B	; 59
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	80 83       	st	Z, r24
    20dc:	0e c0       	rjmp	.+28     	; 0x20fa <MDIO_VoidSetPortValue+0x74>
	case PORTB: PORTB_REG = Copy_U8Val; break;
    20de:	e8 e3       	ldi	r30, 0x38	; 56
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	8a 81       	ldd	r24, Y+2	; 0x02
    20e4:	80 83       	st	Z, r24
    20e6:	09 c0       	rjmp	.+18     	; 0x20fa <MDIO_VoidSetPortValue+0x74>
	case PORTC: PORTC_REG = Copy_U8Val; break;
    20e8:	e5 e3       	ldi	r30, 0x35	; 53
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	80 83       	st	Z, r24
    20f0:	04 c0       	rjmp	.+8      	; 0x20fa <MDIO_VoidSetPortValue+0x74>
	case PORTD: PORTD_REG = Copy_U8Val; break;
    20f2:	e1 e3       	ldi	r30, 0x31	; 49
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	80 83       	st	Z, r24
	default : /* Do NOthing*/;
}
}
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <MDIO_VoidSetTogglePin>:
void MDIO_VoidSetTogglePin(u8 Copy_U8Port,u8 Copy_U8Pin)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <MDIO_VoidSetTogglePin+0x6>
    210e:	00 d0       	rcall	.+0      	; 0x2110 <MDIO_VoidSetTogglePin+0x8>
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	89 83       	std	Y+1, r24	; 0x01
    2116:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_U8Port)
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	3c 83       	std	Y+4, r19	; 0x04
    2120:	2b 83       	std	Y+3, r18	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	91 05       	cpc	r25, r1
    212a:	49 f1       	breq	.+82     	; 0x217e <MDIO_VoidSetTogglePin+0x76>
    212c:	2b 81       	ldd	r18, Y+3	; 0x03
    212e:	3c 81       	ldd	r19, Y+4	; 0x04
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	31 05       	cpc	r19, r1
    2134:	2c f4       	brge	.+10     	; 0x2140 <MDIO_VoidSetTogglePin+0x38>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	61 f0       	breq	.+24     	; 0x2156 <MDIO_VoidSetTogglePin+0x4e>
    213e:	5a c0       	rjmp	.+180    	; 0x21f4 <MDIO_VoidSetTogglePin+0xec>
    2140:	2b 81       	ldd	r18, Y+3	; 0x03
    2142:	3c 81       	ldd	r19, Y+4	; 0x04
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	71 f1       	breq	.+92     	; 0x21a6 <MDIO_VoidSetTogglePin+0x9e>
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	83 30       	cpi	r24, 0x03	; 3
    2150:	91 05       	cpc	r25, r1
    2152:	e9 f1       	breq	.+122    	; 0x21ce <MDIO_VoidSetTogglePin+0xc6>
    2154:	4f c0       	rjmp	.+158    	; 0x21f4 <MDIO_VoidSetTogglePin+0xec>
		{
			case PORTA: TOGGLE_BIT(PORTA_REG,Copy_U8Pin); break;
    2156:	ab e3       	ldi	r26, 0x3B	; 59
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	eb e3       	ldi	r30, 0x3B	; 59
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	48 2f       	mov	r20, r24
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 2e       	mov	r0, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <MDIO_VoidSetTogglePin+0x6c>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	0a 94       	dec	r0
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <MDIO_VoidSetTogglePin+0x68>
    2178:	84 27       	eor	r24, r20
    217a:	8c 93       	st	X, r24
    217c:	3b c0       	rjmp	.+118    	; 0x21f4 <MDIO_VoidSetTogglePin+0xec>
			case PORTB: TOGGLE_BIT(PORTB_REG,Copy_U8Pin); break;
    217e:	a8 e3       	ldi	r26, 0x38	; 56
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e8 e3       	ldi	r30, 0x38	; 56
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	48 2f       	mov	r20, r24
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 2e       	mov	r0, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <MDIO_VoidSetTogglePin+0x94>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	0a 94       	dec	r0
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <MDIO_VoidSetTogglePin+0x90>
    21a0:	84 27       	eor	r24, r20
    21a2:	8c 93       	st	X, r24
    21a4:	27 c0       	rjmp	.+78     	; 0x21f4 <MDIO_VoidSetTogglePin+0xec>
			case PORTC: TOGGLE_BIT(PORTC_REG,Copy_U8Pin); break;
    21a6:	a5 e3       	ldi	r26, 0x35	; 53
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e5 e3       	ldi	r30, 0x35	; 53
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	48 2f       	mov	r20, r24
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 2e       	mov	r0, r18
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <MDIO_VoidSetTogglePin+0xbc>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0a 94       	dec	r0
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <MDIO_VoidSetTogglePin+0xb8>
    21c8:	84 27       	eor	r24, r20
    21ca:	8c 93       	st	X, r24
    21cc:	13 c0       	rjmp	.+38     	; 0x21f4 <MDIO_VoidSetTogglePin+0xec>
			case PORTD: TOGGLE_BIT(PORTD_REG,Copy_U8Pin); break;
    21ce:	a1 e3       	ldi	r26, 0x31	; 49
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e1 e3       	ldi	r30, 0x31	; 49
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	48 2f       	mov	r20, r24
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	02 2e       	mov	r0, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <MDIO_VoidSetTogglePin+0xe4>
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	0a 94       	dec	r0
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <MDIO_VoidSetTogglePin+0xe0>
    21f0:	84 27       	eor	r24, r20
    21f2:	8c 93       	st	X, r24
			default : /* Do NOthing*/;
		}
}
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <main>:




void main (void)
{
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	df 93       	push	r29
    2208:	cf 93       	push	r28
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	c5 57       	subi	r28, 0x75	; 117
    2210:	d0 40       	sbci	r29, 0x00	; 0
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61


u8 i,x,y,h=1;
    221c:	fe 01       	movw	r30, r28
    221e:	ee 58       	subi	r30, 0x8E	; 142
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	80 83       	st	Z, r24
    2226:	8c c5       	rjmp	.+2840   	; 0x2d40 <main+0xb3e>
	while (h)
	{


		for (i=16,y=25,x=21;((i>0)||(y>0)||(x>0))&&(h==1);i--,x--,y--)
    2228:	fe 01       	movw	r30, r28
    222a:	eb 58       	subi	r30, 0x8B	; 139
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 e1       	ldi	r24, 0x10	; 16
    2230:	80 83       	st	Z, r24
    2232:	fe 01       	movw	r30, r28
    2234:	ed 58       	subi	r30, 0x8D	; 141
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	89 e1       	ldi	r24, 0x19	; 25
    223a:	80 83       	st	Z, r24
    223c:	fe 01       	movw	r30, r28
    223e:	ec 58       	subi	r30, 0x8C	; 140
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	85 e1       	ldi	r24, 0x15	; 21
    2244:	80 83       	st	Z, r24
    2246:	63 c5       	rjmp	.+2758   	; 0x2d0e <main+0xb0c>
		{
			HLCD_VoidInit();
    2248:	0e 94 76 09 	call	0x12ec	; 0x12ec <HLCD_VoidInit>
			HKPD_Init();
    224c:	0e 94 9b 05 	call	0xb36	; 0xb36 <HKPD_Init>


			HLCD_DrawCharStand();
    2250:	0e 94 55 0c 	call	0x18aa	; 0x18aa <HLCD_DrawCharStand>

			if(Get_PressKey()==1)
    2254:	0e 94 aa 05 	call	0xb54	; 0xb54 <Get_PressKey>
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	09 f0       	breq	.+2      	; 0x225e <main+0x5c>
    225c:	bb c0       	rjmp	.+374    	; 0x23d4 <main+0x1d2>
			{
				HLCD_VoidSendCommand(0x01);
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
				HLCD_DrawCharJump(0,3);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	63 e0       	ldi	r22, 0x03	; 3
    2268:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <HLCD_DrawCharJump>
    226c:	fe 01       	movw	r30, r28
    226e:	e3 59       	subi	r30, 0x93	; 147
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a0 ea       	ldi	r26, 0xA0	; 160
    2278:	b2 e4       	ldi	r27, 0x42	; 66
    227a:	80 83       	st	Z, r24
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	a2 83       	std	Z+2, r26	; 0x02
    2280:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2282:	8e 01       	movw	r16, r28
    2284:	07 59       	subi	r16, 0x97	; 151
    2286:	1f 4f       	sbci	r17, 0xFF	; 255
    2288:	fe 01       	movw	r30, r28
    228a:	e3 59       	subi	r30, 0x93	; 147
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	60 81       	ld	r22, Z
    2290:	71 81       	ldd	r23, Z+1	; 0x01
    2292:	82 81       	ldd	r24, Z+2	; 0x02
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	4a ef       	ldi	r20, 0xFA	; 250
    229c:	54 e4       	ldi	r21, 0x44	; 68
    229e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	f8 01       	movw	r30, r16
    22a8:	80 83       	st	Z, r24
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	a2 83       	std	Z+2, r26	; 0x02
    22ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b0:	fe 01       	movw	r30, r28
    22b2:	e7 59       	subi	r30, 0x97	; 151
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e8       	ldi	r20, 0x80	; 128
    22c4:	5f e3       	ldi	r21, 0x3F	; 63
    22c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	44 f4       	brge	.+16     	; 0x22de <main+0xdc>
		__ticks = 1;
    22ce:	fe 01       	movw	r30, r28
    22d0:	e9 59       	subi	r30, 0x99	; 153
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24
    22dc:	64 c0       	rjmp	.+200    	; 0x23a6 <main+0x1a4>
	else if (__tmp > 65535)
    22de:	fe 01       	movw	r30, r28
    22e0:	e7 59       	subi	r30, 0x97	; 151
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	60 81       	ld	r22, Z
    22e6:	71 81       	ldd	r23, Z+1	; 0x01
    22e8:	82 81       	ldd	r24, Z+2	; 0x02
    22ea:	93 81       	ldd	r25, Z+3	; 0x03
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	3f ef       	ldi	r19, 0xFF	; 255
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	0c f0       	brlt	.+2      	; 0x22fe <main+0xfc>
    22fc:	43 c0       	rjmp	.+134    	; 0x2384 <main+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fe:	fe 01       	movw	r30, r28
    2300:	e3 59       	subi	r30, 0x93	; 147
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	60 81       	ld	r22, Z
    2306:	71 81       	ldd	r23, Z+1	; 0x01
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e2       	ldi	r20, 0x20	; 32
    2312:	51 e4       	ldi	r21, 0x41	; 65
    2314:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	8e 01       	movw	r16, r28
    231e:	09 59       	subi	r16, 0x99	; 153
    2320:	1f 4f       	sbci	r17, 0xFF	; 255
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	f8 01       	movw	r30, r16
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
    2334:	1f c0       	rjmp	.+62     	; 0x2374 <main+0x172>
    2336:	fe 01       	movw	r30, r28
    2338:	eb 59       	subi	r30, 0x9B	; 155
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	88 ec       	ldi	r24, 0xC8	; 200
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	91 83       	std	Z+1, r25	; 0x01
    2342:	80 83       	st	Z, r24
    2344:	fe 01       	movw	r30, r28
    2346:	eb 59       	subi	r30, 0x9B	; 155
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 81       	ld	r24, Z
    234c:	91 81       	ldd	r25, Z+1	; 0x01
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <main+0x14c>
    2352:	fe 01       	movw	r30, r28
    2354:	eb 59       	subi	r30, 0x9B	; 155
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	de 01       	movw	r26, r28
    235e:	a9 59       	subi	r26, 0x99	; 153
    2360:	bf 4f       	sbci	r27, 0xFF	; 255
    2362:	fe 01       	movw	r30, r28
    2364:	e9 59       	subi	r30, 0x99	; 153
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	11 96       	adiw	r26, 0x01	; 1
    2370:	9c 93       	st	X, r25
    2372:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	fe 01       	movw	r30, r28
    2376:	e9 59       	subi	r30, 0x99	; 153
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	d1 f6       	brne	.-76     	; 0x2336 <main+0x134>
    2382:	28 c0       	rjmp	.+80     	; 0x23d4 <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	8e 01       	movw	r16, r28
    2386:	09 59       	subi	r16, 0x99	; 153
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	fe 01       	movw	r30, r28
    238c:	e7 59       	subi	r30, 0x97	; 151
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	f8 01       	movw	r30, r16
    23a2:	91 83       	std	Z+1, r25	; 0x01
    23a4:	80 83       	st	Z, r24
    23a6:	de 01       	movw	r26, r28
    23a8:	ad 59       	subi	r26, 0x9D	; 157
    23aa:	bf 4f       	sbci	r27, 0xFF	; 255
    23ac:	fe 01       	movw	r30, r28
    23ae:	e9 59       	subi	r30, 0x99	; 153
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	11 96       	adiw	r26, 0x01	; 1
    23b8:	9c 93       	st	X, r25
    23ba:	8e 93       	st	-X, r24
    23bc:	fe 01       	movw	r30, r28
    23be:	ed 59       	subi	r30, 0x9D	; 157
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <main+0x1c4>
    23ca:	fe 01       	movw	r30, r28
    23cc:	ed 59       	subi	r30, 0x9D	; 157
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	91 83       	std	Z+1, r25	; 0x01
    23d2:	80 83       	st	Z, r24
				_delay_ms(80);
			}

			if(i>1)
    23d4:	fe 01       	movw	r30, r28
    23d6:	eb 58       	subi	r30, 0x8B	; 139
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	80 81       	ld	r24, Z
    23dc:	82 30       	cpi	r24, 0x02	; 2
    23de:	08 f4       	brcc	.+2      	; 0x23e2 <main+0x1e0>
    23e0:	ba c0       	rjmp	.+372    	; 0x2556 <main+0x354>
			{
	HLCD_DrawCharTree1(i);
    23e2:	fe 01       	movw	r30, r28
    23e4:	eb 58       	subi	r30, 0x8B	; 139
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <HLCD_DrawCharTree1>
    23ee:	fe 01       	movw	r30, r28
    23f0:	e1 5a       	subi	r30, 0xA1	; 161
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 ea       	ldi	r26, 0xA0	; 160
    23fa:	b2 e4       	ldi	r27, 0x42	; 66
    23fc:	80 83       	st	Z, r24
    23fe:	91 83       	std	Z+1, r25	; 0x01
    2400:	a2 83       	std	Z+2, r26	; 0x02
    2402:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	8e 01       	movw	r16, r28
    2406:	05 5a       	subi	r16, 0xA5	; 165
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e1 5a       	subi	r30, 0xA1	; 161
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	f8 01       	movw	r30, r16
    242a:	80 83       	st	Z, r24
    242c:	91 83       	std	Z+1, r25	; 0x01
    242e:	a2 83       	std	Z+2, r26	; 0x02
    2430:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2432:	fe 01       	movw	r30, r28
    2434:	e5 5a       	subi	r30, 0xA5	; 165
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	44 f4       	brge	.+16     	; 0x2460 <main+0x25e>
		__ticks = 1;
    2450:	fe 01       	movw	r30, r28
    2452:	e7 5a       	subi	r30, 0xA7	; 167
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	91 83       	std	Z+1, r25	; 0x01
    245c:	80 83       	st	Z, r24
    245e:	64 c0       	rjmp	.+200    	; 0x2528 <main+0x326>
	else if (__tmp > 65535)
    2460:	fe 01       	movw	r30, r28
    2462:	e5 5a       	subi	r30, 0xA5	; 165
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	0c f0       	brlt	.+2      	; 0x2480 <main+0x27e>
    247e:	43 c0       	rjmp	.+134    	; 0x2506 <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	fe 01       	movw	r30, r28
    2482:	e1 5a       	subi	r30, 0xA1	; 161
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8e 01       	movw	r16, r28
    24a0:	07 5a       	subi	r16, 0xA7	; 167
    24a2:	1f 4f       	sbci	r17, 0xFF	; 255
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	f8 01       	movw	r30, r16
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
    24b6:	1f c0       	rjmp	.+62     	; 0x24f6 <main+0x2f4>
    24b8:	fe 01       	movw	r30, r28
    24ba:	e9 5a       	subi	r30, 0xA9	; 169
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	88 ec       	ldi	r24, 0xC8	; 200
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	fe 01       	movw	r30, r28
    24c8:	e9 5a       	subi	r30, 0xA9	; 169
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <main+0x2ce>
    24d4:	fe 01       	movw	r30, r28
    24d6:	e9 5a       	subi	r30, 0xA9	; 169
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	de 01       	movw	r26, r28
    24e0:	a7 5a       	subi	r26, 0xA7	; 167
    24e2:	bf 4f       	sbci	r27, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	e7 5a       	subi	r30, 0xA7	; 167
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	11 96       	adiw	r26, 0x01	; 1
    24f2:	9c 93       	st	X, r25
    24f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f6:	fe 01       	movw	r30, r28
    24f8:	e7 5a       	subi	r30, 0xA7	; 167
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	d1 f6       	brne	.-76     	; 0x24b8 <main+0x2b6>
    2504:	28 c0       	rjmp	.+80     	; 0x2556 <main+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	8e 01       	movw	r16, r28
    2508:	07 5a       	subi	r16, 0xA7	; 167
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	e5 5a       	subi	r30, 0xA5	; 165
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	60 81       	ld	r22, Z
    2514:	71 81       	ldd	r23, Z+1	; 0x01
    2516:	82 81       	ldd	r24, Z+2	; 0x02
    2518:	93 81       	ldd	r25, Z+3	; 0x03
    251a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	f8 01       	movw	r30, r16
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
    2528:	de 01       	movw	r26, r28
    252a:	ab 5a       	subi	r26, 0xAB	; 171
    252c:	bf 4f       	sbci	r27, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	e7 5a       	subi	r30, 0xA7	; 167
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	11 96       	adiw	r26, 0x01	; 1
    253a:	9c 93       	st	X, r25
    253c:	8e 93       	st	-X, r24
    253e:	fe 01       	movw	r30, r28
    2540:	eb 5a       	subi	r30, 0xAB	; 171
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	80 81       	ld	r24, Z
    2546:	91 81       	ldd	r25, Z+1	; 0x01
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <main+0x346>
    254c:	fe 01       	movw	r30, r28
    254e:	eb 5a       	subi	r30, 0xAB	; 171
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
	_delay_ms(80);
			}

			if(x>1)
    2556:	fe 01       	movw	r30, r28
    2558:	ec 58       	subi	r30, 0x8C	; 140
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	82 30       	cpi	r24, 0x02	; 2
    2560:	08 f4       	brcc	.+2      	; 0x2564 <main+0x362>
    2562:	ba c0       	rjmp	.+372    	; 0x26d8 <main+0x4d6>
			{
	HLCD_DrawCharTree2(x);
    2564:	fe 01       	movw	r30, r28
    2566:	ec 58       	subi	r30, 0x8C	; 140
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <HLCD_DrawCharTree2>
    2570:	fe 01       	movw	r30, r28
    2572:	ef 5a       	subi	r30, 0xAF	; 175
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 ea       	ldi	r26, 0xA0	; 160
    257c:	b2 e4       	ldi	r27, 0x42	; 66
    257e:	80 83       	st	Z, r24
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	a2 83       	std	Z+2, r26	; 0x02
    2584:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	8e 01       	movw	r16, r28
    2588:	03 5b       	subi	r16, 0xB3	; 179
    258a:	1f 4f       	sbci	r17, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	ef 5a       	subi	r30, 0xAF	; 175
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	82 81       	ldd	r24, Z+2	; 0x02
    2598:	93 81       	ldd	r25, Z+3	; 0x03
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a ef       	ldi	r20, 0xFA	; 250
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	f8 01       	movw	r30, r16
    25ac:	80 83       	st	Z, r24
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	a2 83       	std	Z+2, r26	; 0x02
    25b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b4:	fe 01       	movw	r30, r28
    25b6:	e3 5b       	subi	r30, 0xB3	; 179
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	44 f4       	brge	.+16     	; 0x25e2 <main+0x3e0>
		__ticks = 1;
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 5b       	subi	r30, 0xB5	; 181
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
    25e0:	64 c0       	rjmp	.+200    	; 0x26aa <main+0x4a8>
	else if (__tmp > 65535)
    25e2:	fe 01       	movw	r30, r28
    25e4:	e3 5b       	subi	r30, 0xB3	; 179
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	3f ef       	ldi	r19, 0xFF	; 255
    25f4:	4f e7       	ldi	r20, 0x7F	; 127
    25f6:	57 e4       	ldi	r21, 0x47	; 71
    25f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	0c f0       	brlt	.+2      	; 0x2602 <main+0x400>
    2600:	43 c0       	rjmp	.+134    	; 0x2688 <main+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2602:	fe 01       	movw	r30, r28
    2604:	ef 5a       	subi	r30, 0xAF	; 175
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8e 01       	movw	r16, r28
    2622:	05 5b       	subi	r16, 0xB5	; 181
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	bc 01       	movw	r22, r24
    2628:	cd 01       	movw	r24, r26
    262a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	f8 01       	movw	r30, r16
    2634:	91 83       	std	Z+1, r25	; 0x01
    2636:	80 83       	st	Z, r24
    2638:	1f c0       	rjmp	.+62     	; 0x2678 <main+0x476>
    263a:	fe 01       	movw	r30, r28
    263c:	e7 5b       	subi	r30, 0xB7	; 183
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	88 ec       	ldi	r24, 0xC8	; 200
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	80 83       	st	Z, r24
    2648:	fe 01       	movw	r30, r28
    264a:	e7 5b       	subi	r30, 0xB7	; 183
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <main+0x450>
    2656:	fe 01       	movw	r30, r28
    2658:	e7 5b       	subi	r30, 0xB7	; 183
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	de 01       	movw	r26, r28
    2662:	a5 5b       	subi	r26, 0xB5	; 181
    2664:	bf 4f       	sbci	r27, 0xFF	; 255
    2666:	fe 01       	movw	r30, r28
    2668:	e5 5b       	subi	r30, 0xB5	; 181
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	11 96       	adiw	r26, 0x01	; 1
    2674:	9c 93       	st	X, r25
    2676:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	fe 01       	movw	r30, r28
    267a:	e5 5b       	subi	r30, 0xB5	; 181
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	91 81       	ldd	r25, Z+1	; 0x01
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	d1 f6       	brne	.-76     	; 0x263a <main+0x438>
    2686:	28 c0       	rjmp	.+80     	; 0x26d8 <main+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2688:	8e 01       	movw	r16, r28
    268a:	05 5b       	subi	r16, 0xB5	; 181
    268c:	1f 4f       	sbci	r17, 0xFF	; 255
    268e:	fe 01       	movw	r30, r28
    2690:	e3 5b       	subi	r30, 0xB3	; 179
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	f8 01       	movw	r30, r16
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	de 01       	movw	r26, r28
    26ac:	a9 5b       	subi	r26, 0xB9	; 185
    26ae:	bf 4f       	sbci	r27, 0xFF	; 255
    26b0:	fe 01       	movw	r30, r28
    26b2:	e5 5b       	subi	r30, 0xB5	; 181
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	11 96       	adiw	r26, 0x01	; 1
    26bc:	9c 93       	st	X, r25
    26be:	8e 93       	st	-X, r24
    26c0:	fe 01       	movw	r30, r28
    26c2:	e9 5b       	subi	r30, 0xB9	; 185
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <main+0x4c8>
    26ce:	fe 01       	movw	r30, r28
    26d0:	e9 5b       	subi	r30, 0xB9	; 185
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	80 83       	st	Z, r24
	_delay_ms(80);
			}

if (y>1)
    26d8:	fe 01       	movw	r30, r28
    26da:	ed 58       	subi	r30, 0x8D	; 141
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	08 f4       	brcc	.+2      	; 0x26e6 <main+0x4e4>
    26e4:	8b c0       	rjmp	.+278    	; 0x27fc <main+0x5fa>
{
	HLCD_DrawCharTree3(y);
    26e6:	fe 01       	movw	r30, r28
    26e8:	ed 58       	subi	r30, 0x8D	; 141
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <HLCD_DrawCharTree3>
    26f2:	fe 01       	movw	r30, r28
    26f4:	ed 5b       	subi	r30, 0xBD	; 189
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a0 ea       	ldi	r26, 0xA0	; 160
    26fe:	b2 e4       	ldi	r27, 0x42	; 66
    2700:	80 83       	st	Z, r24
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	a2 83       	std	Z+2, r26	; 0x02
    2706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	8e 01       	movw	r16, r28
    270a:	01 5c       	subi	r16, 0xC1	; 193
    270c:	1f 4f       	sbci	r17, 0xFF	; 255
    270e:	fe 01       	movw	r30, r28
    2710:	ed 5b       	subi	r30, 0xBD	; 189
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a ef       	ldi	r20, 0xFA	; 250
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	f8 01       	movw	r30, r16
    272e:	80 83       	st	Z, r24
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	a2 83       	std	Z+2, r26	; 0x02
    2734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2736:	fe 01       	movw	r30, r28
    2738:	ff 96       	adiw	r30, 0x3f	; 63
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	2c f4       	brge	.+10     	; 0x275c <main+0x55a>
		__ticks = 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9e af       	std	Y+62, r25	; 0x3e
    2758:	8d af       	std	Y+61, r24	; 0x3d
    275a:	46 c0       	rjmp	.+140    	; 0x27e8 <main+0x5e6>
	else if (__tmp > 65535)
    275c:	fe 01       	movw	r30, r28
    275e:	ff 96       	adiw	r30, 0x3f	; 63
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	3f ef       	ldi	r19, 0xFF	; 255
    276c:	4f e7       	ldi	r20, 0x7F	; 127
    276e:	57 e4       	ldi	r21, 0x47	; 71
    2770:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2774:	18 16       	cp	r1, r24
    2776:	64 f5       	brge	.+88     	; 0x27d0 <main+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2778:	fe 01       	movw	r30, r28
    277a:	ed 5b       	subi	r30, 0xBD	; 189
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e2       	ldi	r20, 0x20	; 32
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9e af       	std	Y+62, r25	; 0x3e
    27a4:	8d af       	std	Y+61, r24	; 0x3d
    27a6:	0f c0       	rjmp	.+30     	; 0x27c6 <main+0x5c4>
    27a8:	88 ec       	ldi	r24, 0xC8	; 200
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9c af       	std	Y+60, r25	; 0x3c
    27ae:	8b af       	std	Y+59, r24	; 0x3b
    27b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    27b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <main+0x5b2>
    27b8:	9c af       	std	Y+60, r25	; 0x3c
    27ba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    27be:	9e ad       	ldd	r25, Y+62	; 0x3e
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	9e af       	std	Y+62, r25	; 0x3e
    27c4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    27c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	69 f7       	brne	.-38     	; 0x27a8 <main+0x5a6>
    27ce:	16 c0       	rjmp	.+44     	; 0x27fc <main+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d0:	fe 01       	movw	r30, r28
    27d2:	ff 96       	adiw	r30, 0x3f	; 63
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	82 81       	ldd	r24, Z+2	; 0x02
    27da:	93 81       	ldd	r25, Z+3	; 0x03
    27dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9e af       	std	Y+62, r25	; 0x3e
    27e6:	8d af       	std	Y+61, r24	; 0x3d
    27e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ec:	9a af       	std	Y+58, r25	; 0x3a
    27ee:	89 af       	std	Y+57, r24	; 0x39
    27f0:	89 ad       	ldd	r24, Y+57	; 0x39
    27f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <main+0x5f2>
    27f8:	9a af       	std	Y+58, r25	; 0x3a
    27fa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(80);
}

 if (1==y)
    27fc:	fe 01       	movw	r30, r28
    27fe:	ed 58       	subi	r30, 0x8D	; 141
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	79 f4       	brne	.+30     	; 0x2826 <main+0x624>
 {
	 i=16;
    2808:	fe 01       	movw	r30, r28
    280a:	eb 58       	subi	r30, 0x8B	; 139
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	80 e1       	ldi	r24, 0x10	; 16
    2810:	80 83       	st	Z, r24
	 x=21;
    2812:	fe 01       	movw	r30, r28
    2814:	ec 58       	subi	r30, 0x8C	; 140
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	85 e1       	ldi	r24, 0x15	; 21
    281a:	80 83       	st	Z, r24
	 y=25;
    281c:	fe 01       	movw	r30, r28
    281e:	ed 58       	subi	r30, 0x8D	; 141
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	89 e1       	ldi	r24, 0x19	; 25
    2824:	80 83       	st	Z, r24

 }

 if((3==i)&&(Get_PressKey()!=1))
    2826:	fe 01       	movw	r30, r28
    2828:	eb 58       	subi	r30, 0x8B	; 139
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	83 30       	cpi	r24, 0x03	; 3
    2830:	09 f0       	breq	.+2      	; 0x2834 <main+0x632>
    2832:	87 c0       	rjmp	.+270    	; 0x2942 <main+0x740>
    2834:	0e 94 aa 05 	call	0xb54	; 0xb54 <Get_PressKey>
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	09 f4       	brne	.+2      	; 0x283e <main+0x63c>
    283c:	82 c0       	rjmp	.+260    	; 0x2942 <main+0x740>
 			 			{
	 HLCD_VoidSendCommand(0x01);
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
 				HLCD_VoidSetPostion(0,5);
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	65 e0       	ldi	r22, 0x05	; 5
    2848:	0e 94 96 0b 	call	0x172c	; 0x172c <HLCD_VoidSetPostion>
 				HLCD_VoidStringChar("Game Over");
    284c:	80 e6       	ldi	r24, 0x60	; 96
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD_VoidStringChar>
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a8 ec       	ldi	r26, 0xC8	; 200
    285a:	b2 e4       	ldi	r27, 0x42	; 66
    285c:	8d ab       	std	Y+53, r24	; 0x35
    285e:	9e ab       	std	Y+54, r25	; 0x36
    2860:	af ab       	std	Y+55, r26	; 0x37
    2862:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2864:	6d a9       	ldd	r22, Y+53	; 0x35
    2866:	7e a9       	ldd	r23, Y+54	; 0x36
    2868:	8f a9       	ldd	r24, Y+55	; 0x37
    286a:	98 ad       	ldd	r25, Y+56	; 0x38
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4a ef       	ldi	r20, 0xFA	; 250
    2872:	54 e4       	ldi	r21, 0x44	; 68
    2874:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	89 ab       	std	Y+49, r24	; 0x31
    287e:	9a ab       	std	Y+50, r25	; 0x32
    2880:	ab ab       	std	Y+51, r26	; 0x33
    2882:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2884:	69 a9       	ldd	r22, Y+49	; 0x31
    2886:	7a a9       	ldd	r23, Y+50	; 0x32
    2888:	8b a9       	ldd	r24, Y+51	; 0x33
    288a:	9c a9       	ldd	r25, Y+52	; 0x34
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e8       	ldi	r20, 0x80	; 128
    2892:	5f e3       	ldi	r21, 0x3F	; 63
    2894:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2898:	88 23       	and	r24, r24
    289a:	2c f4       	brge	.+10     	; 0x28a6 <main+0x6a4>
		__ticks = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	98 ab       	std	Y+48, r25	; 0x30
    28a2:	8f a7       	std	Y+47, r24	; 0x2f
    28a4:	3f c0       	rjmp	.+126    	; 0x2924 <main+0x722>
	else if (__tmp > 65535)
    28a6:	69 a9       	ldd	r22, Y+49	; 0x31
    28a8:	7a a9       	ldd	r23, Y+50	; 0x32
    28aa:	8b a9       	ldd	r24, Y+51	; 0x33
    28ac:	9c a9       	ldd	r25, Y+52	; 0x34
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	57 e4       	ldi	r21, 0x47	; 71
    28b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	4c f5       	brge	.+82     	; 0x2910 <main+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28be:	6d a9       	ldd	r22, Y+53	; 0x35
    28c0:	7e a9       	ldd	r23, Y+54	; 0x36
    28c2:	8f a9       	ldd	r24, Y+55	; 0x37
    28c4:	98 ad       	ldd	r25, Y+56	; 0x38
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	51 e4       	ldi	r21, 0x41	; 65
    28ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	98 ab       	std	Y+48, r25	; 0x30
    28e4:	8f a7       	std	Y+47, r24	; 0x2f
    28e6:	0f c0       	rjmp	.+30     	; 0x2906 <main+0x704>
    28e8:	88 ec       	ldi	r24, 0xC8	; 200
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	9e a7       	std	Y+46, r25	; 0x2e
    28ee:	8d a7       	std	Y+45, r24	; 0x2d
    28f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    28f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <main+0x6f2>
    28f8:	9e a7       	std	Y+46, r25	; 0x2e
    28fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	98 ab       	std	Y+48, r25	; 0x30
    2904:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2906:	8f a5       	ldd	r24, Y+47	; 0x2f
    2908:	98 a9       	ldd	r25, Y+48	; 0x30
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	69 f7       	brne	.-38     	; 0x28e8 <main+0x6e6>
    290e:	14 c0       	rjmp	.+40     	; 0x2938 <main+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2910:	69 a9       	ldd	r22, Y+49	; 0x31
    2912:	7a a9       	ldd	r23, Y+50	; 0x32
    2914:	8b a9       	ldd	r24, Y+51	; 0x33
    2916:	9c a9       	ldd	r25, Y+52	; 0x34
    2918:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	98 ab       	std	Y+48, r25	; 0x30
    2922:	8f a7       	std	Y+47, r24	; 0x2f
    2924:	8f a5       	ldd	r24, Y+47	; 0x2f
    2926:	98 a9       	ldd	r25, Y+48	; 0x30
    2928:	9c a7       	std	Y+44, r25	; 0x2c
    292a:	8b a7       	std	Y+43, r24	; 0x2b
    292c:	8b a5       	ldd	r24, Y+43	; 0x2b
    292e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <main+0x72e>
    2934:	9c a7       	std	Y+44, r25	; 0x2c
    2936:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(100);
h=0;
    2938:	fe 01       	movw	r30, r28
    293a:	ee 58       	subi	r30, 0x8E	; 142
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	10 82       	st	Z, r1
    2940:	1b c1       	rjmp	.+566    	; 0x2b78 <main+0x976>
 			 			}
 else if((3==y)&&(Get_PressKey()!=1))
    2942:	fe 01       	movw	r30, r28
    2944:	ed 58       	subi	r30, 0x8D	; 141
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 81       	ld	r24, Z
    294a:	83 30       	cpi	r24, 0x03	; 3
    294c:	09 f0       	breq	.+2      	; 0x2950 <main+0x74e>
    294e:	87 c0       	rjmp	.+270    	; 0x2a5e <main+0x85c>
    2950:	0e 94 aa 05 	call	0xb54	; 0xb54 <Get_PressKey>
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	09 f4       	brne	.+2      	; 0x295a <main+0x758>
    2958:	82 c0       	rjmp	.+260    	; 0x2a5e <main+0x85c>
 						 			{
 				HLCD_VoidSendCommand(0x01);
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
 				HLCD_VoidSetPostion(0,5);
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	65 e0       	ldi	r22, 0x05	; 5
    2964:	0e 94 96 0b 	call	0x172c	; 0x172c <HLCD_VoidSetPostion>
 				HLCD_VoidStringChar("Game Over");
    2968:	80 e6       	ldi	r24, 0x60	; 96
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD_VoidStringChar>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a8 ec       	ldi	r26, 0xC8	; 200
    2976:	b2 e4       	ldi	r27, 0x42	; 66
    2978:	8f a3       	std	Y+39, r24	; 0x27
    297a:	98 a7       	std	Y+40, r25	; 0x28
    297c:	a9 a7       	std	Y+41, r26	; 0x29
    297e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	6f a1       	ldd	r22, Y+39	; 0x27
    2982:	78 a5       	ldd	r23, Y+40	; 0x28
    2984:	89 a5       	ldd	r24, Y+41	; 0x29
    2986:	9a a5       	ldd	r25, Y+42	; 0x2a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8b a3       	std	Y+35, r24	; 0x23
    299a:	9c a3       	std	Y+36, r25	; 0x24
    299c:	ad a3       	std	Y+37, r26	; 0x25
    299e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29a0:	6b a1       	ldd	r22, Y+35	; 0x23
    29a2:	7c a1       	ldd	r23, Y+36	; 0x24
    29a4:	8d a1       	ldd	r24, Y+37	; 0x25
    29a6:	9e a1       	ldd	r25, Y+38	; 0x26
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <main+0x7c0>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9a a3       	std	Y+34, r25	; 0x22
    29be:	89 a3       	std	Y+33, r24	; 0x21
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <main+0x83e>
	else if (__tmp > 65535)
    29c2:	6b a1       	ldd	r22, Y+35	; 0x23
    29c4:	7c a1       	ldd	r23, Y+36	; 0x24
    29c6:	8d a1       	ldd	r24, Y+37	; 0x25
    29c8:	9e a1       	ldd	r25, Y+38	; 0x26
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <main+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	6f a1       	ldd	r22, Y+39	; 0x27
    29dc:	78 a5       	ldd	r23, Y+40	; 0x28
    29de:	89 a5       	ldd	r24, Y+41	; 0x29
    29e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9a a3       	std	Y+34, r25	; 0x22
    2a00:	89 a3       	std	Y+33, r24	; 0x21
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <main+0x820>
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	98 a3       	std	Y+32, r25	; 0x20
    2a0a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <main+0x80e>
    2a14:	98 a3       	std	Y+32, r25	; 0x20
    2a16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9a a3       	std	Y+34, r25	; 0x22
    2a20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	89 a1       	ldd	r24, Y+33	; 0x21
    2a24:	9a a1       	ldd	r25, Y+34	; 0x22
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <main+0x802>
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <main+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a30:	8d a1       	ldd	r24, Y+37	; 0x25
    2a32:	9e a1       	ldd	r25, Y+38	; 0x26
    2a34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9a a3       	std	Y+34, r25	; 0x22
    2a3e:	89 a3       	std	Y+33, r24	; 0x21
    2a40:	89 a1       	ldd	r24, Y+33	; 0x21
    2a42:	9a a1       	ldd	r25, Y+34	; 0x22
    2a44:	9e 8f       	std	Y+30, r25	; 0x1e
    2a46:	8d 8f       	std	Y+29, r24	; 0x1d
    2a48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <main+0x84a>
    2a50:	9e 8f       	std	Y+30, r25	; 0x1e
    2a52:	8d 8f       	std	Y+29, r24	; 0x1d
 				_delay_ms(100);
 				h=0;
    2a54:	fe 01       	movw	r30, r28
    2a56:	ee 58       	subi	r30, 0x8E	; 142
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	10 82       	st	Z, r1
    2a5c:	8d c0       	rjmp	.+282    	; 0x2b78 <main+0x976>
 						 			}
 else if((3==x)&&(Get_PressKey()!=1))
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ec 58       	subi	r30, 0x8C	; 140
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	83 30       	cpi	r24, 0x03	; 3
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <main+0x86a>
    2a6a:	86 c0       	rjmp	.+268    	; 0x2b78 <main+0x976>
    2a6c:	0e 94 aa 05 	call	0xb54	; 0xb54 <Get_PressKey>
    2a70:	81 30       	cpi	r24, 0x01	; 1
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <main+0x874>
    2a74:	81 c0       	rjmp	.+258    	; 0x2b78 <main+0x976>
 						 			{
 				HLCD_VoidSendCommand(0x01);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
 				HLCD_VoidSetPostion(0,5);
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	65 e0       	ldi	r22, 0x05	; 5
    2a80:	0e 94 96 0b 	call	0x172c	; 0x172c <HLCD_VoidSetPostion>
 				HLCD_VoidStringChar("Game Over");
    2a84:	80 e6       	ldi	r24, 0x60	; 96
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD_VoidStringChar>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a8 ec       	ldi	r26, 0xC8	; 200
    2a92:	b2 e4       	ldi	r27, 0x42	; 66
    2a94:	89 8f       	std	Y+25, r24	; 0x19
    2a96:	9a 8f       	std	Y+26, r25	; 0x1a
    2a98:	ab 8f       	std	Y+27, r26	; 0x1b
    2a9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8d 8b       	std	Y+21, r24	; 0x15
    2ab6:	9e 8b       	std	Y+22, r25	; 0x16
    2ab8:	af 8b       	std	Y+23, r26	; 0x17
    2aba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <main+0x8dc>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9c 8b       	std	Y+20, r25	; 0x14
    2ada:	8b 8b       	std	Y+19, r24	; 0x13
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <main+0x95a>
	else if (__tmp > 65535)
    2ade:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <main+0x946>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	69 8d       	ldd	r22, Y+25	; 0x19
    2af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <main+0x93c>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9a 8b       	std	Y+18, r25	; 0x12
    2b26:	89 8b       	std	Y+17, r24	; 0x11
    2b28:	89 89       	ldd	r24, Y+17	; 0x11
    2b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <main+0x92a>
    2b30:	9a 8b       	std	Y+18, r25	; 0x12
    2b32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8b 89       	ldd	r24, Y+19	; 0x13
    2b36:	9c 89       	ldd	r25, Y+20	; 0x14
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9c 8b       	std	Y+20, r25	; 0x14
    2b3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b40:	9c 89       	ldd	r25, Y+20	; 0x14
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <main+0x91e>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <main+0x96e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	98 8b       	std	Y+16, r25	; 0x10
    2b62:	8f 87       	std	Y+15, r24	; 0x0f
    2b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b66:	98 89       	ldd	r25, Y+16	; 0x10
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <main+0x966>
    2b6c:	98 8b       	std	Y+16, r25	; 0x10
    2b6e:	8f 87       	std	Y+15, r24	; 0x0f
 				_delay_ms(100);
 				h=0;
    2b70:	fe 01       	movw	r30, r28
    2b72:	ee 58       	subi	r30, 0x8E	; 142
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	10 82       	st	Z, r1
 						 			}
 if (2==y)
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ed 58       	subi	r30, 0x8D	; 141
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	82 30       	cpi	r24, 0x02	; 2
    2b82:	09 f0       	breq	.+2      	; 0x2b86 <main+0x984>
    2b84:	a9 c0       	rjmp	.+338    	; 0x2cd8 <main+0xad6>
 {
	 for(u8 c=3;c<=16;c++)
    2b86:	fe 01       	movw	r30, r28
    2b88:	ef 58       	subi	r30, 0x8F	; 143
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	80 83       	st	Z, r24
    2b90:	85 c0       	rjmp	.+266    	; 0x2c9c <main+0xa9a>
	 {
	HLCD_VoidSendCommand(0x01);
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	 HLCD_DrawCharMoveRight(1,c);
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ef 58       	subi	r30, 0x8F	; 143
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	60 81       	ld	r22, Z
    2ba2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <HLCD_DrawCharMoveRight>
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	a8 e4       	ldi	r26, 0x48	; 72
    2bac:	b3 e4       	ldi	r27, 0x43	; 67
    2bae:	8b 87       	std	Y+11, r24	; 0x0b
    2bb0:	9c 87       	std	Y+12, r25	; 0x0c
    2bb2:	ad 87       	std	Y+13, r26	; 0x0d
    2bb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	4a ef       	ldi	r20, 0xFA	; 250
    2bc4:	54 e4       	ldi	r21, 0x44	; 68
    2bc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	8f 83       	std	Y+7, r24	; 0x07
    2bd0:	98 87       	std	Y+8, r25	; 0x08
    2bd2:	a9 87       	std	Y+9, r26	; 0x09
    2bd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd8:	78 85       	ldd	r23, Y+8	; 0x08
    2bda:	89 85       	ldd	r24, Y+9	; 0x09
    2bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e8       	ldi	r20, 0x80	; 128
    2be4:	5f e3       	ldi	r21, 0x3F	; 63
    2be6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bea:	88 23       	and	r24, r24
    2bec:	2c f4       	brge	.+10     	; 0x2bf8 <main+0x9f6>
		__ticks = 1;
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	9e 83       	std	Y+6, r25	; 0x06
    2bf4:	8d 83       	std	Y+5, r24	; 0x05
    2bf6:	3f c0       	rjmp	.+126    	; 0x2c76 <main+0xa74>
	else if (__tmp > 65535)
    2bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfa:	78 85       	ldd	r23, Y+8	; 0x08
    2bfc:	89 85       	ldd	r24, Y+9	; 0x09
    2bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	3f ef       	ldi	r19, 0xFF	; 255
    2c04:	4f e7       	ldi	r20, 0x7F	; 127
    2c06:	57 e4       	ldi	r21, 0x47	; 71
    2c08:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c0c:	18 16       	cp	r1, r24
    2c0e:	4c f5       	brge	.+82     	; 0x2c62 <main+0xa60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e2       	ldi	r20, 0x20	; 32
    2c1e:	51 e4       	ldi	r21, 0x41	; 65
    2c20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	bc 01       	movw	r22, r24
    2c2a:	cd 01       	movw	r24, r26
    2c2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
    2c38:	0f c0       	rjmp	.+30     	; 0x2c58 <main+0xa56>
    2c3a:	88 ec       	ldi	r24, 0xC8	; 200
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	9c 83       	std	Y+4, r25	; 0x04
    2c40:	8b 83       	std	Y+3, r24	; 0x03
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <main+0xa44>
    2c4a:	9c 83       	std	Y+4, r25	; 0x04
    2c4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c50:	9e 81       	ldd	r25, Y+6	; 0x06
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c58:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	69 f7       	brne	.-38     	; 0x2c3a <main+0xa38>
    2c60:	14 c0       	rjmp	.+40     	; 0x2c8a <main+0xa88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c62:	6f 81       	ldd	r22, Y+7	; 0x07
    2c64:	78 85       	ldd	r23, Y+8	; 0x08
    2c66:	89 85       	ldd	r24, Y+9	; 0x09
    2c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9e 83       	std	Y+6, r25	; 0x06
    2c74:	8d 83       	std	Y+5, r24	; 0x05
    2c76:	8d 81       	ldd	r24, Y+5	; 0x05
    2c78:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7a:	9a 83       	std	Y+2, r25	; 0x02
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <main+0xa80>
    2c86:	9a 83       	std	Y+2, r25	; 0x02
    2c88:	89 83       	std	Y+1, r24	; 0x01
 				_delay_ms(100);
 				h=0;
 						 			}
 if (2==y)
 {
	 for(u8 c=3;c<=16;c++)
    2c8a:	de 01       	movw	r26, r28
    2c8c:	af 58       	subi	r26, 0x8F	; 143
    2c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c90:	fe 01       	movw	r30, r28
    2c92:	ef 58       	subi	r30, 0x8F	; 143
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	80 81       	ld	r24, Z
    2c98:	8f 5f       	subi	r24, 0xFF	; 255
    2c9a:	8c 93       	st	X, r24
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	ef 58       	subi	r30, 0x8F	; 143
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	81 31       	cpi	r24, 0x11	; 17
    2ca6:	08 f4       	brcc	.+2      	; 0x2caa <main+0xaa8>
    2ca8:	74 cf       	rjmp	.-280    	; 0x2b92 <main+0x990>
	 {
	HLCD_VoidSendCommand(0x01);
	 HLCD_DrawCharMoveRight(1,c);
	 _delay_ms(200);
 }
	 i=0;
    2caa:	fe 01       	movw	r30, r28
    2cac:	eb 58       	subi	r30, 0x8B	; 139
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	10 82       	st	Z, r1
	 x=0;
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	ec 58       	subi	r30, 0x8C	; 140
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	10 82       	st	Z, r1
	 h=0;
    2cba:	fe 01       	movw	r30, r28
    2cbc:	ee 58       	subi	r30, 0x8E	; 142
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	10 82       	st	Z, r1
	 y=0;
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ed 58       	subi	r30, 0x8D	; 141
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	10 82       	st	Z, r1
	 HLCD_VoidSendCommand(0x01);
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	0e 94 ef 07 	call	0xfde	; 0xfde <HLCD_VoidSendCommand>
	 HLCD_VoidStringChar("Winner Winner");
    2cd0:	8a e6       	ldi	r24, 0x6A	; 106
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 6d 0b 	call	0x16da	; 0x16da <HLCD_VoidStringChar>
u8 i,x,y,h=1;
	while (h)
	{


		for (i=16,y=25,x=21;((i>0)||(y>0)||(x>0))&&(h==1);i--,x--,y--)
    2cd8:	de 01       	movw	r26, r28
    2cda:	ab 58       	subi	r26, 0x8B	; 139
    2cdc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cde:	fe 01       	movw	r30, r28
    2ce0:	eb 58       	subi	r30, 0x8B	; 139
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	81 50       	subi	r24, 0x01	; 1
    2ce8:	8c 93       	st	X, r24
    2cea:	de 01       	movw	r26, r28
    2cec:	ac 58       	subi	r26, 0x8C	; 140
    2cee:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ec 58       	subi	r30, 0x8C	; 140
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	81 50       	subi	r24, 0x01	; 1
    2cfa:	8c 93       	st	X, r24
    2cfc:	de 01       	movw	r26, r28
    2cfe:	ad 58       	subi	r26, 0x8D	; 141
    2d00:	bf 4f       	sbci	r27, 0xFF	; 255
    2d02:	fe 01       	movw	r30, r28
    2d04:	ed 58       	subi	r30, 0x8D	; 141
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	81 50       	subi	r24, 0x01	; 1
    2d0c:	8c 93       	st	X, r24
    2d0e:	fe 01       	movw	r30, r28
    2d10:	eb 58       	subi	r30, 0x8B	; 139
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	88 23       	and	r24, r24
    2d18:	61 f4       	brne	.+24     	; 0x2d32 <main+0xb30>
    2d1a:	fe 01       	movw	r30, r28
    2d1c:	ed 58       	subi	r30, 0x8D	; 141
    2d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d20:	80 81       	ld	r24, Z
    2d22:	88 23       	and	r24, r24
    2d24:	31 f4       	brne	.+12     	; 0x2d32 <main+0xb30>
    2d26:	fe 01       	movw	r30, r28
    2d28:	ec 58       	subi	r30, 0x8C	; 140
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 23       	and	r24, r24
    2d30:	39 f0       	breq	.+14     	; 0x2d40 <main+0xb3e>
    2d32:	fe 01       	movw	r30, r28
    2d34:	ee 58       	subi	r30, 0x8E	; 142
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <main+0xb3e>
    2d3e:	84 ca       	rjmp	.-2808   	; 0x2248 <main+0x46>
void main (void)
{


u8 i,x,y,h=1;
	while (h)
    2d40:	fe 01       	movw	r30, r28
    2d42:	ee 58       	subi	r30, 0x8E	; 142
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 81       	ld	r24, Z
    2d48:	88 23       	and	r24, r24
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <main+0xb4c>
    2d4c:	6d ca       	rjmp	.-2854   	; 0x2228 <main+0x26>



	}

    }
    2d4e:	cb 58       	subi	r28, 0x8B	; 139
    2d50:	df 4f       	sbci	r29, 0xFF	; 255
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	08 95       	ret

00002d66 <__mulsi3>:
    2d66:	62 9f       	mul	r22, r18
    2d68:	d0 01       	movw	r26, r0
    2d6a:	73 9f       	mul	r23, r19
    2d6c:	f0 01       	movw	r30, r0
    2d6e:	82 9f       	mul	r24, r18
    2d70:	e0 0d       	add	r30, r0
    2d72:	f1 1d       	adc	r31, r1
    2d74:	64 9f       	mul	r22, r20
    2d76:	e0 0d       	add	r30, r0
    2d78:	f1 1d       	adc	r31, r1
    2d7a:	92 9f       	mul	r25, r18
    2d7c:	f0 0d       	add	r31, r0
    2d7e:	83 9f       	mul	r24, r19
    2d80:	f0 0d       	add	r31, r0
    2d82:	74 9f       	mul	r23, r20
    2d84:	f0 0d       	add	r31, r0
    2d86:	65 9f       	mul	r22, r21
    2d88:	f0 0d       	add	r31, r0
    2d8a:	99 27       	eor	r25, r25
    2d8c:	72 9f       	mul	r23, r18
    2d8e:	b0 0d       	add	r27, r0
    2d90:	e1 1d       	adc	r30, r1
    2d92:	f9 1f       	adc	r31, r25
    2d94:	63 9f       	mul	r22, r19
    2d96:	b0 0d       	add	r27, r0
    2d98:	e1 1d       	adc	r30, r1
    2d9a:	f9 1f       	adc	r31, r25
    2d9c:	bd 01       	movw	r22, r26
    2d9e:	cf 01       	movw	r24, r30
    2da0:	11 24       	eor	r1, r1
    2da2:	08 95       	ret

00002da4 <__udivmodsi4>:
    2da4:	a1 e2       	ldi	r26, 0x21	; 33
    2da6:	1a 2e       	mov	r1, r26
    2da8:	aa 1b       	sub	r26, r26
    2daa:	bb 1b       	sub	r27, r27
    2dac:	fd 01       	movw	r30, r26
    2dae:	0d c0       	rjmp	.+26     	; 0x2dca <__udivmodsi4_ep>

00002db0 <__udivmodsi4_loop>:
    2db0:	aa 1f       	adc	r26, r26
    2db2:	bb 1f       	adc	r27, r27
    2db4:	ee 1f       	adc	r30, r30
    2db6:	ff 1f       	adc	r31, r31
    2db8:	a2 17       	cp	r26, r18
    2dba:	b3 07       	cpc	r27, r19
    2dbc:	e4 07       	cpc	r30, r20
    2dbe:	f5 07       	cpc	r31, r21
    2dc0:	20 f0       	brcs	.+8      	; 0x2dca <__udivmodsi4_ep>
    2dc2:	a2 1b       	sub	r26, r18
    2dc4:	b3 0b       	sbc	r27, r19
    2dc6:	e4 0b       	sbc	r30, r20
    2dc8:	f5 0b       	sbc	r31, r21

00002dca <__udivmodsi4_ep>:
    2dca:	66 1f       	adc	r22, r22
    2dcc:	77 1f       	adc	r23, r23
    2dce:	88 1f       	adc	r24, r24
    2dd0:	99 1f       	adc	r25, r25
    2dd2:	1a 94       	dec	r1
    2dd4:	69 f7       	brne	.-38     	; 0x2db0 <__udivmodsi4_loop>
    2dd6:	60 95       	com	r22
    2dd8:	70 95       	com	r23
    2dda:	80 95       	com	r24
    2ddc:	90 95       	com	r25
    2dde:	9b 01       	movw	r18, r22
    2de0:	ac 01       	movw	r20, r24
    2de2:	bd 01       	movw	r22, r26
    2de4:	cf 01       	movw	r24, r30
    2de6:	08 95       	ret

00002de8 <__prologue_saves__>:
    2de8:	2f 92       	push	r2
    2dea:	3f 92       	push	r3
    2dec:	4f 92       	push	r4
    2dee:	5f 92       	push	r5
    2df0:	6f 92       	push	r6
    2df2:	7f 92       	push	r7
    2df4:	8f 92       	push	r8
    2df6:	9f 92       	push	r9
    2df8:	af 92       	push	r10
    2dfa:	bf 92       	push	r11
    2dfc:	cf 92       	push	r12
    2dfe:	df 92       	push	r13
    2e00:	ef 92       	push	r14
    2e02:	ff 92       	push	r15
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	ca 1b       	sub	r28, r26
    2e12:	db 0b       	sbc	r29, r27
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	09 94       	ijmp

00002e20 <__epilogue_restores__>:
    2e20:	2a 88       	ldd	r2, Y+18	; 0x12
    2e22:	39 88       	ldd	r3, Y+17	; 0x11
    2e24:	48 88       	ldd	r4, Y+16	; 0x10
    2e26:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e28:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e30:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e32:	b9 84       	ldd	r11, Y+9	; 0x09
    2e34:	c8 84       	ldd	r12, Y+8	; 0x08
    2e36:	df 80       	ldd	r13, Y+7	; 0x07
    2e38:	ee 80       	ldd	r14, Y+6	; 0x06
    2e3a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e3c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e3e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e40:	aa 81       	ldd	r26, Y+2	; 0x02
    2e42:	b9 81       	ldd	r27, Y+1	; 0x01
    2e44:	ce 0f       	add	r28, r30
    2e46:	d1 1d       	adc	r29, r1
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	ed 01       	movw	r28, r26
    2e54:	08 95       	ret

00002e56 <_exit>:
    2e56:	f8 94       	cli

00002e58 <__stop_program>:
    2e58:	ff cf       	rjmp	.-2      	; 0x2e58 <__stop_program>
